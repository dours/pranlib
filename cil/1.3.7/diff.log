diff -r -c -N orig/Makefile.in trunk/Makefile.in
*** orig/Makefile.in	2009-04-24 22:50:33.000000000 +0400
--- trunk/Makefile.in	2010-01-24 18:13:34.000000000 +0300
***************
*** 91,97 ****
  # ww: we don't want "main" in an external cil library (cil.cma),
  # otherwise every program that links against that library will get
  # main's argument checking and whatnot ...
! CILLY_MODULES = $(CILLY_LIBRARY_MODULES) main
  CILLY_CMODULES = perfcount
  CILLY_LIBS     = unix str
  
--- 91,100 ----
  # ww: we don't want "main" in an external cil library (cil.cma),
  # otherwise every program that links against that library will get
  # main's argument checking and whatnot ...
! CILLY_MODULES = $(CILLY_LIBRARY_MODULES) \
!                 cilCFGPrinter \
!                 cil2Pranlib cilPranlibAA pranlibAliasAsserts \
!                 main
  CILLY_CMODULES = perfcount
  CILLY_LIBS     = unix str
  
***************
*** 115,129 ****
  
     # Now the rule to make cilly
  
! cilly: $(OBJDIR)/cilly$(EXE)
! $(OBJDIR)/cilly$(EXE) : $(CILLY_MODULES:%=$(OBJDIR)/%.$(CMO)) \
!                         $(CILLY_CMODULES:%=$(OBJDIR)/%.$(CMC))
! 	@$(NARRATIVE) "Linking $(COMPILETOWHAT) $@ $(LINKMSG)"
! 	$(AT)$(CAMLLINK) -verbose -o $@ \
!                     $(CILLY_LIBS:%=%.$(CMXA)) \
!                     $(CILLY_LIBS:%=-cclib -l%) \
!                     $^
! 
  
  quickbuild: cilversion machdep cilly lib/Cilly.pm
  
--- 118,131 ----
  
     # Now the rule to make cilly
  
! PROJECT_EXECUTABLE = $(OBJDIR)/cilly$(EXE)
! PROJECT_MODULES    = $(CILLY_MODULES)
! PROJECT_CMODULES   = perfcount $(CILLY_CMODULES)
! PROJECT_LIBS       = $(CILLY_LIBS)
! OOPS_LIBS_NAMES    = typeutil ostap checked urray BinomialHeap PM pranlib ocamlgraph
! OOPS_LIBS          = typeutil.cma checked.cma urray.cma BinomialHeap.cma PM.cma ostap.cmo pranlib.cma graph.cma
! cilly: $(PROJECT_EXECUTABLE)
! include ocamlutil/Makefile.ocaml.build
  
  quickbuild: cilversion machdep cilly lib/Cilly.pm
  
***************
*** 574,579 ****
--- 576,585 ----
  quicktest: $(patsubst %,test/%,func init init1) \
             $(patsubst %,testrun/%,hello wchar1 vararg1)
  
+ check-oops:
+ 	cd test/oops ; \
+ 	./test.sh
+ 
  .PHONY: check
  check: quicktest
  
diff -r -c -N orig/ocamlutil/Makefile.ocaml trunk/ocamlutil/Makefile.ocaml
*** orig/ocamlutil/Makefile.ocaml	2009-04-24 22:50:33.000000000 +0400
--- trunk/ocamlutil/Makefile.ocaml	2010-01-24 18:13:34.000000000 +0300
***************
*** 181,187 ****
  COMPILE_FLAGS := $(COMPILEFLAGS)
  LINK_FLAGS    := $(LINKFLAGS)
  
! COMPILE_FLAGS += -I $(OBJDIR)
  
  # sm: two styles for echoing compilation progress:
  #   style 1, by George:
--- 181,187 ----
  COMPILE_FLAGS := $(COMPILEFLAGS)
  LINK_FLAGS    := $(LINKFLAGS)
  
! COMPILE_FLAGS += -I $(OBJDIR) -I `ocamlfind -query pranlib`
  
  # sm: two styles for echoing compilation progress:
  #   style 1, by George:
diff -r -c -N orig/ocamlutil/Makefile.ocaml.build trunk/ocamlutil/Makefile.ocaml.build
*** orig/ocamlutil/Makefile.ocaml.build	1970-01-01 03:00:00.000000000 +0300
--- trunk/ocamlutil/Makefile.ocaml.build	2010-01-24 18:13:34.000000000 +0300
***************
*** 0 ****
--- 1,55 ----
+ # -*- Mode: makefile -*-
+ # Copyright (c) 2001-2002, 
+ #  George C. Necula    <necula@cs.berkeley.edu>
+ #  Scott McPeak        <smcpeak@cs.berkeley.edu>
+ #  Wes Weimer          <weimer@cs.berkeley.edu>
+ # All rights reserved.
+ # 
+ # Redistribution and use in source and binary forms, with or without
+ # modification, are permitted provided that the following conditions are
+ # met:
+ #
+ # 1. Redistributions of source code must retain the above copyright
+ # notice, this list of conditions and the following disclaimer.
+ #
+ # 2. Redistributions in binary form must reproduce the above copyright
+ # notice, this list of conditions and the following disclaimer in the
+ # documentation and/or other materials provided with the distribution.
+ #
+ # 3. The names of the contributors may not be used to endorse or promote
+ # products derived from this software without specific prior written
+ # permission.
+ #
+ # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
+ # IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ # TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ # PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ # OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ # LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ # NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ 
+   # Auxiliary Makefile for building Ocaml project. See the documentation in
+   # the associated Makefile.ocaml for how to use this file.
+   # Written by necula@cs.berkeley.edu
+   # 
+ 
+ 
+ $(PROJECT_EXECUTABLE) : $(PROJECT_MODULES:%=$(OBJDIR)/%.$(CMO)) \
+                         $(PROJECT_CMODULES:%=$(OBJDIR)/%.$(CMC))
+ 	@$(NARRATIVE) "Linking $(COMPILETOWHAT) $@ $(LINKMSG)"
+ 	@LIBPATHS= ;\
+ 	for F in $(OOPS_LIBS_NAMES) ;\
+ 	do \
+ 	  LIBPATH="$$LIBPATH -I `ocamlfind -query $$F`" ;\
+ 	done ; \
+ 	$(CAMLLINK) -verbose -o $@ \
+ 	            $(LINK_FLAGS) \
+                     $$LIBPATH \
+                     $(PROJECT_LIBS:%=%.$(CMXA)) \
+                     $(patsubst %.cmo, %.$(CMO), $(patsubst %.cma,%.$(CMXA),$(OOPS_LIBS))) \
+                     $(PROJECT_LIBS:%=-cclib -l%) \
+                     $^
diff -r -c -N orig/src/cilutil.ml trunk/src/cilutil.ml
*** orig/src/cilutil.ml	2009-04-24 22:50:33.000000000 +0400
--- trunk/src/cilutil.ml	2010-01-24 18:13:34.000000000 +0300
***************
*** 36,41 ****
--- 36,45 ----
   *)
  
  (* Keep here the globally-visible flags *)
+ let doPranlibAliasAsserts = ref false
+ let doPranlibAA = ref false (* Whether to run pranlib alias analysis *)
+ let doCilCFGPrinter = ref false   (* Whether to run cil2CFG *)
+ 
  let doCheck= ref false   (* Whether to check CIL *)
  let strictChecking= ref false   (* If doCheck is true and warnings are found,
                                  * treat them as errors. *)
diff -r -c -N orig/src/ext/cil2Pranlib.ml trunk/src/ext/cil2Pranlib.ml
*** orig/src/ext/cil2Pranlib.ml	1970-01-01 03:00:00.000000000 +0300
--- trunk/src/ext/cil2Pranlib.ml	2009-12-12 16:42:58.000000000 +0300
***************
*** 0 ****
--- 1,168 ----
+ module Node =
+   struct
+ 
+     type lval    = Cil.lval
+     type exp     = Cil.exp
+     let  d_instr = Cil.d_instr
+     let  d_exp   = Cil.d_exp
+     let  d_lval  = Cil.d_lval
+    
+     type t = Start |
+              Empty |
+              Call of lval option * exp * exp list |
+              Set  of lval * exp |
+              Return of (exp option) |
+              If of exp  
+    
+     let toString x = 
+ 	let pr d = (Pretty.sprint 50 d) in
+ 	let printEList l = String.concat ";\\n" (List.map (fun e -> pr (d_exp () e)) l) in
+ 	match x with
+ 	| Start -> "Start"
+ 	| Empty -> "Empty"
+         | Call (lval, e, el) -> String.concat ""
+             ( (match lval with None -> [""] | Some (lv) -> [pr (d_lval () lv); " = "]) @
+               ["Call"; pr (d_exp () e); printEList el]
+             )
+         | Set (lval, e) -> String.concat ""
+             [pr (d_lval () lval); "="; pr (d_exp () e)]
+ 	| Return r -> String.concat "" 
+ 	    ["Return "; (match r with  None -> "" | Some e -> pr (d_exp () e)); ";\\n" ]
+ 	| If e -> String.concat "" 
+ 	    ["Branch ("; pr (d_exp () e); ")"]
+       | _ -> "unsupported construction"
+ 
+   end
+ 
+ module Edge =
+   struct
+ 	
+     type t = True | False | FallThrough | GoTo
+ 	        
+     let toString typ = 
+ 	String.concat "; " 
+ 	[
+ 	    (match typ with
+ 	      | True        -> "true"
+     	      | False       -> "false"
+ 	      | FallThrough -> "fallthrough"
+ 	      | GoTo        -> "goto")
+ 	
+ 	]
+   end
+ 
+ module Graph = Digraph.Make(Node)(Edge)
+ 
+ module type ProcedureStatements =
+  sig
+    val stmts : Cil.stmt list
+  end 
+ 
+ module PranlibGraph  =
+   struct
+ 
+     module type Sig =
+       sig
+         include CFG.Sig with
+           type Node.t = Graph.Node.t and
+           type Edge.t = Graph.Edge.t and
+           type t = Graph.t
+         exception ImageNotFoundException
+         val findPranlibImage : Cil.stmt -> [`CFN of Node.t | `Ins of Node.t list ]
+       end
+ 
+     module Make (S: sig val stmts : Cil.stmt list end) =
+       struct 
+  
+         open Cil
+         
+         type c = [`Stmt of stmt | `Node of Node.t ]
+     
+         type img = [`CFN of Node.t | `Ins of Node.t list ]
+     
+         exception ImageNotFoundException = Not_found
+     
+         let binding = Hashtbl.create (List.length S.stmts)
+         let bind = Hashtbl.add binding
+         
+         (**receives cil flow graph as an argument and create pranlinb flow graph *)
+         let (graph, start)  =
+             let graph, start = Graph.insertNode (Graph.create ()) Node.Start in
+             let h = Hashtbl.create 100 in
+             let rec dep from etype graph stmt = 
+                 if Hashtbl.mem h stmt then 
+                 fst (Graph.insertEdge graph from (Hashtbl.find h stmt) etype)
+                 else match stmt.skind with 
+                 | Instr [] -> 
+                               let graph, fi = Graph.insertNode graph Node.Empty in
+                               bind stmt.sid (`CFN fi);
+                               let graph = fst (Graph.insertEdge graph from fi etype) in
+                               dep fi Edge.GoTo graph (List.hd stmt.succs)
+                 | Instr il -> let gnode = function
+                                | Set (lval, expr, _) -> Node.Set (lval, expr)
+                                | Call (lval , exp , expl, _) -> Node.Call (lval , exp , expl)
+                                | Asm _ -> raise (Failure "didn't expect this construction")
+                               in
+                               let graph, fi = Graph.insertNode graph (gnode (List.hd il)) in
+                               let graph = fst (Graph.insertEdge graph from fi etype) in
+                               Hashtbl.add h stmt fi;
+                               let graph, li, nodesRev =
+                                 List.fold_left 
+                                  (fun (graph, ci, nodesRev) el ->
+                                    let graph, ni = Graph.insertNode graph (gnode el) in
+                                      let graph = fst (Graph.insertEdge graph ci ni Edge.FallThrough) in
+                                   graph, ni, ni :: nodesRev
+                                  )          
+                                  (graph, fi, [fi])
+                                  (List.tl il)
+                               in
+                               bind stmt.sid (`Ins (List.rev nodesRev)); 
+                               (match stmt.succs with
+                                 [] -> graph
+                                | hd :: _ -> dep li Edge.GoTo graph hd
+                               )
+                 | _       -> let getnode = function
+                              | Block b | Loop (b, _, _, _) -> `Stmt (List.hd b.bstmts)
+                              | Instr _ | Break _ | Continue _ | Switch _ | TryFinally _ | TryExcept _
+                                             -> raise (Failure "didn't expect this construction")
+                              | If (expr, _, _, _) -> `Node (Node.If (expr))
+                              | Goto _ -> `Node Node.Empty (* this goto instruction will be represented as an edge *)
+                              | Return (e, _) -> `Node (Node.Return e)
+                              in match getnode stmt.skind with
+                                `Stmt s -> dep from etype graph s
+                              | `Node node  ->                
+                                  let graph, node = Graph.insertNode graph node
+                                  in
+                                  bind stmt.sid (`CFN node);
+                                  Hashtbl.add h stmt node;
+                                  let graph = fst (Graph.insertEdge graph from node etype) in		
+                                  match stmt.skind with
+                                  | If (expr, b1, b2, _) when (List.length stmt.succs = 2) ->
+                                     let [s1; s2] = stmt.succs in (* first element in the succs list corresponds to false *)
+                                     dep node Edge.False (dep node Edge.True graph s2) s1
+                                  | _ -> (match stmt.succs with
+                                            [] -> graph
+                                          | [st] -> dep node Edge.GoTo graph st)
+             in
+             match S.stmts with
+               [] -> graph, start
+             | hd :: _ -> (dep start Edge.GoTo graph (List.hd S.stmts)), start
+     
+         let graph = graph
+     
+         let start = start
+     
+         let findPranlibImage stmt = 
+           try
+             Hashtbl.find binding (stmt.sid)
+           with Not_found -> raise ImageNotFoundException
+     
+         include Graph
+       
+       end
+   end
+ 
+ 
+ 
+ 
+ 
diff -r -c -N orig/src/ext/cil2Pranlib.mli trunk/src/ext/cil2Pranlib.mli
*** orig/src/ext/cil2Pranlib.mli	1970-01-01 03:00:00.000000000 +0300
--- trunk/src/ext/cil2Pranlib.mli	2009-12-12 16:42:58.000000000 +0300
***************
*** 0 ****
--- 1,72 ----
+ (** {1 Interface for conversion from cil flow graph to pranlib flow graph} *)
+ 
+ (** module for pranlib graph node information representation *)
+ module Node :
+   sig
+     (** node information type *)
+     type t = private 
+     | Start (** Start node mark *)
+     | Empty (** Empty node mark *)
+     | Call of Cil.lval option * Cil.exp * Cil.exp list (** [Call (l, f, args)] corresponds to statement [l] = [f] ([args]) *)
+     | Set  of Cil.lval * Cil.exp (** Assignment node mark *)
+     | Return of (Cil.exp option) (** Return statement node mark *)
+     | If of Cil.exp  (** If branch statement node mark *)
+ 
+     (** function providing string representation of node information *)
+     val toString : t -> string
+   end
+ 
+ (** pranlib graph edge representation *)
+ module Edge :
+   sig
+     (** edge information type *)
+     type t = private
+     | True (** "Then" branch of an if statement *)
+     | False (** "Else" branch of an if statement *)
+     | FallThrough (** Edge between two consecutive statements *)
+     | GoTo (** Edge corresponding to a "goto" statement *)
+ 
+     (** function providing string representation of edge information *)
+     val toString : t -> string
+   end
+ 
+ (** Pranlib graph module *)
+ module Graph : Digraph.Sig with
+   type Node.info = Node.t and
+   type Edge.info = Edge.t
+ 
+ (** List of statements corresponding to some procedure *)
+ module type ProcedureStatements =
+  sig
+    val stmts : Cil.stmt list
+  end
+ 
+ (** CIl to pranlib graph conversion functor and result signature *)
+ module PranlibGraph :
+   sig
+ 
+     (** Signature of Pranlib Graph representation *)
+     module type Sig =
+       sig
+         (** Signature of underlying control flow graph *)
+         include CFG.Sig with
+           type Node.t = Graph.Node.t and
+           type Edge.t = Graph.Edge.t and
+           type t = Graph.t
+ 
+         exception ImageNotFoundException
+ 
+         (** finds the "image" of a cil statement.
+             Depending of statement kind it is a single node ([`CFN n]), or
+             a list of nodes corresponding to instructions of an instruction list statement ([`Ins nl]).
+            
+             Throws ImageNotFoundException if image does not exist.
+          *)
+         val findPranlibImage : Cil.stmt -> [`CFN of Node.t | `Ins of Node.t list ]
+         
+       end
+ 
+     (** Functor to create pranlib Control-Flow Graph from CIL statements list *)
+     module Make (S : ProcedureStatements) : Sig 
+  end
+ 
diff -r -c -N orig/src/ext/cilCFGPrinter.ml trunk/src/ext/cilCFGPrinter.ml
*** orig/src/ext/cilCFGPrinter.ml	1970-01-01 03:00:00.000000000 +0300
--- trunk/src/ext/cilCFGPrinter.ml	2009-12-12 16:42:58.000000000 +0300
***************
*** 0 ****
--- 1,159 ----
+ open Cil
+ 
+ let proj13 (x, _, _) = x
+ let proj23 (_, x, _) = x
+ let proj33 (_, _, x) = x
+ 
+ module Node = struct
+ 
+     type t = Start | Empty | Instr of instr list | Return of (instr list) * (exp option) | If of (instr list) * exp
+     
+     let toString x = 
+ 	let protect s = Str.global_replace (Str.regexp "\n") "\\n" 
+ 			      (Str.global_replace (Str.regexp "\"") "\\\"" s) in
+ 	let pr d = protect (Pretty.sprint 50 d) in
+ 	let printIList l = String.concat ";\\n" (List.map (fun i -> pr (d_instr () i)) l) in
+ 	
+ 	match x with
+ 	| Instr l ->  printIList l
+ 	| Return (l, r) -> String.concat "" 
+ 	    [printIList l; if not (l = []) then ";\\n\\n" else ""; 
+ 		"Return "; (match r with | None -> "" | Some e -> pr (d_exp () e)); ";\\n" ]
+ 	| Start -> "Start"
+ 	| Empty -> "Empty"
+ 	| If (l, e) -> String.concat "" 
+ 	    [printIList l; if not (l = []) then ";\\n\\n" else ""; "Branch ("; pr (d_exp () e); ")"]
+ 
+ 
+     let empty = function
+ 	| Empty | Instr [] -> true
+ 	| _ -> false   
+ 	
+ 
+     let merge a b = match a, b with
+ 	| Start, _ | _, Start -> raise (Failure "why merging with start? We'll loose it!")
+ 	| Empty, b -> b
+ 	| a, Empty -> a
+ 	| Return _, _ | If _, _ -> raise (Failure "why merging If or Return with x? x becomes unreachable this case!")
+ 	| Instr l1, Instr l2 -> Instr (List.append l1 l2)
+ 	| Instr l1, Return (l2, e) -> Return ((List.append l1 l2), e)
+ 	| Instr l1, If (l2, e) -> If ((List.append l1 l2), e)
+ 	
+ 
+ end
+ 
+ module Helper = struct
+     type t = Node.t
+     let empty = Node.empty
+     let merge = Node.merge
+ end
+ 
+ module Edge =
+     struct
+ 	
+     type typ = True | False | FallThrough | GoTo
+     type t = typ * int * int (* type of an edge and its number in the graph and its frequency *)
+ 	  
+     let typ = proj13
+     let id = proj23
+     let freq = proj33
+     
+     let next typ id = 
+ 	id := !id + 1;
+ 	typ, !id, 0
+     
+     let toString (typ, id, freq) = 
+ 	String.concat "; " 
+ 	[
+ 	    (match typ with
+ 	      | True        -> "true"
+     	      | False       -> "false"
+ 	      | FallThrough -> "fallthrough"
+ 	      | GoTo        -> "goto")
+ 	;
+ 	    Printf.sprintf "n%i" id
+ 	;
+ 	    Printf.sprintf "w%i" freq
+ 	]
+ 		
+ end
+ 
+ module Graph = Digraph.Make(Node)(Edge)
+  
+ let rec printcalls stmts = 
+  let printinstr = function
+   | Call (_, Lval ((Var i), o)  , _, _) -> Printf.printf "%s\n" i.vname
+   | Call (_, _, _, _) -> Printf.printf "%s\n" "Unknown call"
+   | _ -> ()
+  in  
+  match stmts with
+   | hd :: tl -> (match hd.skind with
+                    Instr l -> List.map printinstr l; printcalls tl
+                  | _       -> printcalls (List.tl stmts)
+                 )
+   | [] -> ()
+   
+   
+ 
+   let create stmts = 
+     let h = Hashtbl.create 100 in
+     let graph, start = Graph.insertNode (Graph.create ()) Node.Start in
+     let eid = ref (-1) in 
+     let rec dep from etype graph stmt = 
+ 		if Hashtbl.mem h stmt then 
+                 fst (Graph.insertEdge graph from (Hashtbl.find h stmt) etype) else
+ 		let graph, node = Graph.insertNode graph (
+ 			match stmt.skind with
+ 				| Block _ | Loop   _ -> Node.Empty
+ 				| Break _ | Continue _ | Switch _ | TryFinally _ | TryExcept _
+                                                      -> raise (Failure "didn't expect this construction")
+ 				| If (expr, _, _, _) -> if List.length stmt.succs < 2 then 
+ 				    Node.Empty (* we use an information, that CIL expression HAS NO SIDE-EFFECTS here *)  
+ 				    else Node.If ([], expr)
+ 				| Goto _ ->  Node.Empty (* this goto instruction will be represented as an edge *)
+ 				| Instr l -> Node.Instr l
+ 				| Return (e, _) -> Node.Return ([], e)
+ 		) in
+ 		Hashtbl.add h stmt node;
+ 		let graph = fst (Graph.insertEdge graph from node etype) in		
+ 		match stmt.skind with
+ 		    | If (expr, b1, b2, _) when (List.length stmt.succs = 2) ->
+ 			let [s1; s2] = stmt.succs in
+ (*!!!!!!!: It's not written anywhere, that the first element in the succs list corresponds to false :( *)
+ 			dep node (Edge.next Edge.False eid) (dep node (Edge.next Edge.True eid) graph s2) s1
+ 		    | _ -> (match stmt.succs with
+ 			    | [] -> graph
+ 			    | [st] -> dep node (Edge.next Edge.GoTo eid) graph st)
+ 		    
+     in
+     (dep start (Edge.next Edge.GoTo eid) graph (List.hd stmts)), start
+ 
+ 
+ let megaFun ({ fileName = fname; globals = g } as fl) = 
+ 	Printf.fprintf stderr "%s" "cfgPrinter working\n";
+         iterGlobals fl (function
+ 	| GFun (f, _) -> 
+ 	    prepareCFG f;
+ 	    computeCFGInfo f true;
+             printcalls f.sbody.bstmts;
+ 	    let graph, start = create f.sbody.bstmts in   
+ 	    let module G = CFG.Make(Graph)(struct let graph = graph let start = start end) in
+ 	    let module D = DFST.Make(G) in 
+ 	    let module O = CFO.Make(D)(Helper) in
+ 	    let (graph, start), _ = O.removeEmptyNodes () in 
+ 	    let och = open_out (String.concat "" [f.svar.vname; ".dot"]) in
+ 	    Printf.fprintf och "%s" (Graph.DOT.toDOT graph);
+ 	    close_out och  
+ 	| _ -> ()
+     )
+     
+ 
+ let feature : featureDescr = 
+   { fd_name = "cfgPrinter";              
+     fd_enabled = Cilutil.doCilCFGPrinter;
+     fd_description = "build the pranlib's CFG of the program and write it to <func name>.dot files";
+     fd_extraopt = [];
+     fd_doit = megaFun;
+     fd_post_check = true 
+   } 
+ 
diff -r -c -N orig/src/ext/cilPranlibAA.ml trunk/src/ext/cilPranlibAA.ml
*** orig/src/ext/cilPranlibAA.ml	1970-01-01 03:00:00.000000000 +0300
--- trunk/src/ext/cilPranlibAA.ml	2010-01-24 18:01:29.000000000 +0300
***************
*** 0 ****
--- 1,347 ----
+ open Cil
+ open Cil2Pranlib
+ open AliasView
+ open Printf
+ 
+ (*let debugOut = open_out "cilAA.log"
+   let debugPrint = Printf.fprintf debugOut
+ *)
+ 
+ let (>>) g f = (fun x -> f (g x))
+ 
+ let iteri l f = fst ( List.fold_right (fun el (tail, i) -> ((f i el) :: tail, i + 1))           
+                                       l 
+                                       ([], (List.length l) - 1)
+                     )
+ 
+ let aliasGraphFile = ref ""
+ 
+ module BI = 
+   struct
+     type t = string * Region.t
+ 
+     let toString (n, r) = n   
+ 
+     let region = snd
+   end
+ 
+ module AnalysisFramework = Make (BI)  
+ 
+ module Memory = AnalysisFramework.M
+ module Block = Memory.Block
+ module Statement = AnalysisFramework.S
+ module Expression = Statement.Expr
+ 
+ 
+ (** Module providing a mapping from a region of memory visible (and accessible) from some function
+     to its "image" in a representation suitable for pranlib alias Results execution. *)
+ module CilToPranlibMemoryMap =
+   struct
+     (** Declarations of variables visible from some function. *)
+     module type Declarations =
+       sig
+         (** Global variables declarations. *)
+         val globals : Cil.varinfo list
+ 
+         (** Function formal arguments declarations. *)
+         val args : Cil.varinfo list
+ 
+         (** Local variables of a function.*)
+         val locals : Cil.varinfo list
+       end
+ 
+     
+     module type Sig =
+       sig
+         module D : Declarations
+   
+         (** returns expression representing block (or blocks) corresponding to variable denoted by varinfo*)
+         val getBlockExpr  : varinfo -> Expression.t 
+      
+         (** returns region allocated for given name *)
+         val getRegion : string  ->  Region.t
+     
+         (** [typeToBlockType r vname vtype] creates block type from a region [r], variable name [vname] and variable type [vtype]*)
+         val typeToBlockType : Region.t -> string -> typ -> Block.InfoTree.t option
+       end
+ 
+   (** Constructs a memory mapping module. *)
+   module Make (D : Declarations) =
+     struct
+       module D = D
+ 
+       let memoryRegionNamesList = ["Global"; "Local"; "Heap"]
+   
+       let vars = Hashtbl.create 100     
+       let regs = ref []
+       
+       let rec typeToBlockType region name = function
+        | TInt _ | TFloat _ | TPtr _ | TEnum _ | TArray _ | TBuiltin_va_list _ | TFun _ -> Some (Block.InfoTree.make (name, region) [])
+        | TComp (info, _)  when not(info.cstruct) -> Some (Block.InfoTree.make (name, region) [])
+        | TNamed (info, _) -> typeToBlockType region name info.ttype                    
+        | TComp (info, _) -> let fieldsInfo = Array.of_list info.cfields in
+                              Some ( Block.InfoTree.make
+                                       (name, region)
+                                       (Array.fold_right (fun el acc -> match typeToBlockType region el.fname el.ftype with    
+                                                                          Some t -> t :: acc
+                                                                        | None ->  raise (Failure "typeToBlockType")
+                                                         ) fieldsInfo []
+                                       )
+                                   )               
+        | _ -> None
+ 
+       let rec isTypeContainingMergedBlocks = function
+       | TArray _ -> true
+       | TComp (info, _) when not(info.cstruct) -> true
+       | TComp (info, _) -> List.exists (fun fieldInfo -> isTypeContainingMergedBlocks fieldInfo.ftype) info.cfields
+       | TNamed (info, _) -> isTypeContainingMergedBlocks info.ttype
+       | _ -> false
+      
+       let regionName info = match info.vstorage with
+        | NoStorage -> if info.vglob then "Global" else "Local"
+        | Static    -> "Local"
+        | Register  -> if List.exists (fun elem -> (elem = info)) D.globals
+                       then "Global"
+                       else "Local"
+        | Extern    -> "Global"
+ 
+       let getBlockExpr info =
+         try
+           Hashtbl.find vars info.vid
+         with Not_found -> failwith ("Not found block with info " ^ info.vname)
+      
+       let getRegion name =
+         try 
+           List.find (fun r -> (Region.name r) = name) !regs
+         with Not_found -> failwith ("Not found region " ^ name)
+            
+       let initRegions = fun () -> List.fold_left
+         (fun m name -> let (m, r) = Memory.createRegion m name [] in
+                          regs := r :: !regs;
+                          m
+         ) Memory.empty memoryRegionNamesList
+ 
+       let addVarToMemory varinfo memory = 
+         let varRegion = getRegion (regionName varinfo)
+         in
+         match typeToBlockType varRegion varinfo.vname varinfo.vtype with
+           Some typ -> let (newMemory, b) = Memory.allocateBlock memory typ in
+                       if isTypeContainingMergedBlocks varinfo.vtype
+                       then  (
+                         let (newMemory', b') = Memory.allocateBlock newMemory typ in 
+                           Hashtbl.add vars varinfo.vid (Expression.oneOf (Expression.block b) (Expression.block b'));
+                           newMemory'
+                         )
+                       else (
+                           Hashtbl.add vars varinfo.vid (Expression.block b); 
+                           newMemory
+                         )
+          | None -> memory
+   
+       let init = fun () ->
+         let memory = initRegions () 
+         in
+         List.fold_left (fun memory varinfo -> addVarToMemory varinfo memory) memory (D.globals @ D.args @ D.locals)     
+                           
+     end
+   end
+ 
+ module Abstractor (MemoryMap : CilToPranlibMemoryMap.Sig) =
+   struct
+  
+     module Concrete =
+       struct
+         type node = Graph.Node.t 
+         type edge = Graph.Edge.t
+       end
+   
+     module Abstract =
+       struct
+         type node = Statement.t list  
+         type edge = Graph.Edge.t
+       end
+ 
+     type pos = Left | Right
+ 
+     let getField i = function
+     | Some b -> let sbs = (Block.subblocks b) in
+                   if i < Array.length sbs
+                   then Some (sbs.(i))
+                   else None
+     | None -> None
+ 
+     let findFieldNumber fld = 
+         let rec find n = function
+           | (hd :: tl) -> if hd == fld then n else find (n + 1) tl
+           | [] -> raise (Failure "structure field not found")
+         in find 0 fld.fcomp.cfields
+ 
+     let rec lvalue =
+       let getField' i b = getField i (Some b)
+       in 
+       let rec makeOffset bl = function 
+       | NoOffset | Index _ ->  bl 
+       | Field (info, _) when not(info.fcomp.cstruct) -> bl 
+       | Field (info, off) -> makeOffset (Expression.sub (getField' (findFieldNumber info)) bl)  off 
+       in function
+       | Var (info), off -> makeOffset (MemoryMap.getBlockExpr info) off   
+       | Mem (Lval l), off  -> makeOffset (Expression.value (lvalue l)) off
+       | Mem (AddrOf l), off -> makeOffset (lvalue l) off 
+       | Mem e, _ -> Expression.region (expr Left e)
+     and expr = fun x y -> match (x, y) with
+       | Left,  Lval l    -> lvalue l
+       | Right,  AddrOf l -> lvalue l
+       | Right, Lval l    -> Expression.value (lvalue l)
+       | _, UnOp (_, e, _) | _, BinOp (_, Const _, e, _) | _, BinOp (_, e, Const _, _)
+                          -> Expression.region (expr Right e) 
+       | x, CastE (_,  e) -> expr x e
+       | _                -> Expression.any
+ 
+ 
+      let node x =   
+       let rec maySkipAssignmentTo =
+         let rec aux = function 
+         | TInt _ | TFloat _ | TEnum _ -> true
+         | TArray (t, _, _) -> aux t
+         | _ -> false
+         in function   
+         | Var (info), _ -> aux info.vtype
+         | Mem (AddrOf l), _ -> maySkipAssignmentTo l
+         | _ -> false
+       in              
+       let exprsr = List.map (expr Right)
+       in
+       let node' = function
+       | Node.Call (Some lv, Lval (Var info, _), args) when
+          (match info.vtype with TFun _ -> true | _ -> false) &&
+          (match info.vname with "alloca" | "calloc" | "malloc" | "free" -> true | _ -> false) 
+                        -> 
+           (
+             let getAllocRegionName = function | "alloca" -> "Local" | _ -> "Heap"
+             in
+             let createAlloc t = [Statement.assign (lvalue lv) (Expression.alloc t)]
+             in
+             match info.vname with
+              | "malloc" | "alloca" ->
+                ( match MemoryMap.typeToBlockType
+                         (MemoryMap.getRegion (getAllocRegionName info.vname)) info.vname (Cil.typeOf (Cil.Lval lv))  with 
+                    Some t -> createAlloc t
+                  | None   -> raise (Failure "incorrect type of allocated block")
+                )
+              | "free" -> [Statement.assign (expr Left (List.hd args)) Expression.any]
+              | _      -> failwith "Unexpected operation with memory (cil2PranlibAA)"
+           )
+       | Node.Call (lv, f, args)->
+           let black = Statement.black [(MemoryMap.getRegion "Heap");] ((Expression.some (MemoryMap.getRegion "Global")) ::(exprsr args)) in
+             ( match lv with
+                 Some v -> (Statement.assign (lvalue v) Expression.any) :: [black] 
+               | _      -> [black]
+             )
+      | Node.Set (lv, e) ->
+         let makeStructAssignment lv e t = 
+           let cover = fun x -> Some x 
+             in
+             let rec aux subf = function
+               | TComp (info, _) -> List.concat (iteri info.cfields (fun i fld -> aux (subf >> (getField i))  fld.ftype))
+               | _ -> [Statement.assign (Expression.sub (cover >> subf) lv) (Expression.sub (cover >> subf) e)] 
+             in aux (fun x -> x) t
+           in
+           (match Cil.typeOf (Cil.Lval lv) with
+             | TComp (info, _) as t -> makeStructAssignment (lvalue lv) (expr Right e) t
+             | _                    -> if not(maySkipAssignmentTo lv)
+                                       then [Statement.assign (lvalue lv) (expr Right e)]
+                                       else []
+           )
+       | Node.Start ->
+           [Statement.black [(MemoryMap.getRegion "Heap");]
+                            ((Expression.some (MemoryMap.getRegion "Global")) :: (List.map MemoryMap.getBlockExpr MemoryMap.D.args))]
+       | _ -> []
+       in node' (Graph.Node.info x)
+   
+   
+     let edge x = x
+ 
+   end
+   
+ 
+ let createGlobalDeclsList fl =  
+   foldGlobals fl (fun tl -> function
+    | GVarDecl (info, _) | GVar (info, _, _) ->  info :: tl
+    | GFun (fdec, _) -> fdec.svar :: tl
+    | _ -> tl
+   )
+   []
+ 
+ module type FuncReference = 
+   sig    
+     val file : Cil.file
+     val func : Cil.fundec
+   end
+ 
+ module AnalyseFunction (FD : FuncReference) =
+   struct
+     module PG = PranlibGraph.Make
+      (struct
+         let stmts =
+             prepareCFG FD.func; 
+             computeCFGInfo FD.func true;
+             FD.func.sallstmts
+       end)
+ 
+     let (may, must, dot) = 
+       let module Declarations =
+         struct
+           let globals = createGlobalDeclsList FD.file
+           let args = FD.func.sformals
+           let locals = FD.func.slocals
+         end
+       in
+       let module MemoryMap = CilToPranlibMemoryMap.Make (Declarations) in
+       let memory = MemoryMap.init () in
+       let module A = Abstractor (MemoryMap) in 
+       let module Results = AnalysisFramework.Analyse (struct let memory = memory end) (A) (PG)
+       in
+       let eval node e = Results.after node (A.expr A.Left e)
+       in
+       (fun node e1 e2 -> Results.may (eval node e1) (eval node e2)),
+       (fun node e1 e2 -> Results.must (eval node e1) (eval node e2)),
+       lazy (Results.DOT.toDOT())
+ 
+     let may  = may
+     let must = must
+     let dot  = dot
+ 
+   end
+ 
+ 
+ let start file = 
+   iterGlobals file (function
+     | GFun (f, _) ->
+         if !aliasGraphFile != ""
+         then ( let och = open_out !aliasGraphFile
+                in
+                let module FD = struct let file = file let func = f end
+                in
+                let module Result = AnalyseFunction (FD)
+                in 
+                Printf.fprintf och "%s" (Lazy.force Result.dot);
+                close_out och
+               )
+     | _ -> ()
+   )
+     
+ 
+ let feature : featureDescr = 
+   { fd_name = "pranlibAA";              
+     fd_enabled = Cilutil.doPranlibAA;
+     fd_description = "building of the pranlib's CFG of the program and performing alias Results on it";
+     fd_extraopt = [
+       ("--aliasgraphfile", Arg.String (fun s -> aliasGraphFile := s), 
+        " name of the file where alias graph should be printed")
+     ];
+     fd_doit = start;
+     fd_post_check = true
+   } 
+ 
+ 
+ 
diff -r -c -N orig/src/ext/cilPranlibAA.mli trunk/src/ext/cilPranlibAA.mli
*** orig/src/ext/cilPranlibAA.mli	1970-01-01 03:00:00.000000000 +0300
--- trunk/src/ext/cilPranlibAA.mli	2010-01-23 16:25:45.000000000 +0300
***************
*** 0 ****
--- 1,20 ----
+ module type FuncReference = 
+   sig
+     val file : Cil.file
+     val func : Cil.fundec
+   end
+ 
+ module AnalyseFunction (FD : FuncReference) :
+   sig
+     module PG: Cil2Pranlib.PranlibGraph.Sig
+ 
+     val may : PG.Node.t -> Cil.exp -> Cil.exp -> bool
+ 
+     val must : PG.Node.t -> Cil.exp -> Cil.exp -> bool
+ 
+   end
+   
+ val feature : Cil.featureDescr
+ 
+ 
+ 
diff -r -c -N orig/src/ext/pranlibAliasAsserts.ml trunk/src/ext/pranlibAliasAsserts.ml
*** orig/src/ext/pranlibAliasAsserts.ml	1970-01-01 03:00:00.000000000 +0300
--- trunk/src/ext/pranlibAliasAsserts.ml	2009-12-12 16:42:58.000000000 +0300
***************
*** 0 ****
--- 1,187 ----
+ open Cil
+ open Cil2Pranlib
+ open AliasView
+ open Printf 
+ 
+ module PointerDegree = 
+   struct
+     type t = Degree of int
+ 
+     let compare v1 v2 = match (v1, v2) with
+       (Degree d1), (Degree d2) -> d2 - d1
+ 
+     let max v1 v2 = match (v1, v2) with
+       (Degree d1), (Degree d2) -> if d1 > d2 then (Degree d1) else (Degree d2)
+ 
+     let zero = Degree 0
+ 
+     let toInt = function | (Degree d) -> d
+   end
+ 
+ let mkIntegersSeq max = 
+   let rec aux i = 
+     if i == max
+     then [i]
+     else i :: (aux (i + 1))
+   in
+   if max >= 0
+   then aux 0
+   else []
+ 
+ (* performs list multiplication *)
+ let fold_mult op f list1 list2 =
+   List.fold_right
+    (fun elem1 -> List.fold_right (fun elem2 -> f (op elem1 elem2)) list2)
+    list1
+   
+ (* Giving function definition returns function from pointer degree to a list 
+    of lvalues corresponding to variables whose values are interesting to make assertions about
+    having corresponding p.d. and a maximal p.d. *)
+ let functionScopeVariables : Cil.fundec -> (PointerDegree.t -> Cil.lval list) * PointerDegree.t = fun func ->
+   let module PDegreeMap = Map.Make (PointerDegree)
+   in
+   (* All variables declared in function *)
+   let variables = func.sformals @ func.slocals
+   in
+   (* Counts "pointer degree" of a type. *)
+   let rec pointerDegree = function
+   | TPtr (typ, _) -> 1 + (pointerDegree typ)
+   | TNamed (typeinfo, _) -> pointerDegree typeinfo.ttype
+   | _ -> 0
+   in
+   (* unions two maps*)
+   let union map1 map2 = PDegreeMap.fold
+     (fun key value acc ->
+        if PDegreeMap.mem key acc
+        then PDegreeMap.add key (value @ (PDegreeMap.find key acc)) acc
+        else PDegreeMap.add key value acc
+     ) map1 map2
+   in
+   (* traverses variable definition and creates data structure holding all "lvalues of interest" *)
+   let traverseVarDef : Cil.varinfo ->  (Cil.lval list) PDegreeMap.t = 
+     let rec traverseType : Cil.typ -> (Cil.offset list) PDegreeMap.t = function
+     | TComp (cinfo, _) when cinfo.cstruct ->
+        List.fold_right
+          (fun fieldinfo ->
+            union (
+              PDegreeMap.map
+                (List.map (fun offs -> Cil.Field (fieldinfo, offs)))
+                (traverseType fieldinfo.ftype)
+            )
+          )
+          cinfo.cfields
+          PDegreeMap.empty
+     | typ -> 
+       let pdegree = PointerDegree.Degree (pointerDegree typ) in
+         PDegreeMap.add pdegree [Cil.NoOffset] PDegreeMap.empty
+     in function
+     | varinfo ->
+       PDegreeMap.map
+         (List.map (fun offset -> ((Cil.Var varinfo), offset)))
+         (traverseType varinfo.vtype)
+   in
+   let map = List.fold_left union PDegreeMap.empty (List.map traverseVarDef variables)
+   in
+   let maxDegree = PDegreeMap.fold (fun key _ -> max key) map PointerDegree.zero
+   in
+     (fun pd -> if PDegreeMap.mem pd map then PDegreeMap.find pd map else []),
+     maxDegree
+ 
+ let mkDummyLocation () =
+   {line = -1; file = ""; byte = 0}
+ 
+ let mkBlockOneStmt stmt = Cil.mkBlock [stmt]
+ 
+ let mkStubReturnStmt () = Cil.mkStmt (Cil.Return (None, mkDummyLocation ()))
+ 
+ let createEqualityAssertion exp1 exp2 = Cil.mkStmt (
+    Cil.If (
+      Cil.BinOp (Cil.Eq, exp1, exp2, (Cil.TInt (Cil.IBool, []))),
+      (mkBlockOneStmt (Cil.mkEmptyStmt ())),
+      (mkBlockOneStmt (mkStubReturnStmt ()) ),
+      mkDummyLocation ()
+    )
+ )
+ 
+ let rec last = function
+   hd :: [] -> hd
+ | hd :: tl -> last tl
+ 
+ exception MyExcep
+ 
+ let start file = 
+   iterGlobals file (function
+     | GFun (f, _) ->
+       (
+       let out = (open_out_gen [Open_append] 0 "zzz") in
+       Printf.fprintf out "%s: " file.fileName;
+       Printf.fprintf out "%s\n" f.svar.vname; 
+       flush out;
+       try
+         let module AliasAnalysisResults = CilPranlibAA.AnalyseFunction (struct let file = file let func = f end)
+         in ()
+       with Failure s -> 
+         Printf.fprintf out "FAILURE: %s\n" s; 
+         flush out
+       (* must alias analysis relation "after" specified statement *)
+      (* let mustAfter stmt = 
+         let image = AliasAnalysisResults.PG.findPranlibImage stmt
+         in match image with
+           `CFN node -> AliasAnalysisResults.must node
+         | `Ins nodes -> AliasAnalysisResults.must (last nodes)
+       in
+       let pointerVariablesMap, maxDegree = functionScopeVariables f      
+       in
+       let possibleAliasPairs : (Cil.lval * Cil.lval) list = 
+         let fold_m = fold_mult (fun x y -> (x,y)) (fun hd tl -> hd :: tl)
+         in
+         List.fold_left
+          (fun acc i -> 
+            let degree = PointerDegree.Degree i in
+            let nextDegree = PointerDegree.Degree (i + 1) in
+              fold_m (pointerVariablesMap degree) (pointerVariablesMap nextDegree) acc
+          )
+          []
+          (mkIntegersSeq (PointerDegree.toInt maxDegree))
+       in
+       let mkAssertionsAfter stmt = 
+        Printf.fprintf out "\n---\n";
+        Cil.dumpStmt Cil.defaultCilPrinter out 0 stmt;
+        Printf.fprintf out "\n---\n";
+         let assertionStmts = List.fold_left
+           (fun acc (x, px) ->
+              let varExp = (Cil.Lval x) in
+              let pointerExp = (Cil.Lval (Cil.mkMem (Cil.Lval px) Cil.NoOffset))
+              in
+              if mustAfter stmt varExp pointerExp
+              then  (createEqualityAssertion varExp pointerExp) :: acc
+              else acc
+           )
+           []
+           possibleAliasPairs
+         in     
+         Cil.mkStmt (Cil.Block (Cil.mkBlock assertionStmts))
+       in
+        Printf.fprintf out "%d\n" (List.length (pointerVariablesMap (PointerDegree.Degree 0))); 
+        Printf.fprintf out "%d\n" (List.length (pointerVariablesMap (PointerDegree.Degree 1))); 
+       let updatedStmtList = 
+         List.fold_right (fun s acc -> s :: (mkAssertionsAfter s) :: acc) f.sbody.bstmts []
+       in 
+         f.sbody.bstmts <- updatedStmtList *)
+       )
+     | _ -> ()
+   )
+     
+ 
+ 
+ let feature : featureDescr = 
+   { fd_name = "pranlibAliasAsserts";              
+     fd_enabled = Cilutil.doPranlibAliasAsserts;
+     fd_description = "performs pranlib alias analysis and adds assert statements";
+     fd_extraopt = [];
+     fd_doit = start;
+     fd_post_check = true
+   } 
+ 
+ 
+ 
diff -r -c -N orig/src/main.ml trunk/src/main.ml
*** orig/src/main.ml	2009-04-24 22:50:33.000000000 +0400
--- trunk/src/main.ml	2010-01-24 18:13:34.000000000 +0300
***************
*** 104,109 ****
--- 104,112 ----
      Logcalls.feature;
      Ptranal.feature;
      Liveness.feature;
+     CilCFGPrinter.feature;
+     CilPranlibAA.feature;
+     PranlibAliasAsserts.feature;
    ] 
    @ Feature_config.features 
  
diff -r -c -N orig/test/oops/alias/orig/test1.dot trunk/test/oops/alias/orig/test1.dot
*** orig/test/oops/alias/orig/test1.dot	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/orig/test1.dot	2010-01-24 16:28:39.000000000 +0300
***************
*** 0 ****
--- 1,284 ----
+ digraph X { 
+   label=""; compound="true"; center="true"; fontsize="10";
+ 
+   subgraph cluster15 { 
+     label="Start";
+   
+     invis_15;
+     subgraph cluster17 { 
+       label="after";
+     
+       block_0_17; block_1_17; block_2_17; block_3_17; block_4_17; block_5_17; block_6_17;
+     
+     }
+   
+     subgraph cluster16 { 
+       label="before";
+     
+       block_0_16; block_1_16; block_2_16; block_3_16; block_4_16; block_5_16; block_6_16;
+     
+     }
+   }
+ 
+   subgraph cluster12 { 
+     label="Branch (b)";
+   
+     invis_12;
+     subgraph cluster14 { 
+       label="after";
+     
+       block_0_14; block_1_14; block_2_14; block_3_14; block_4_14; block_5_14; block_6_14;
+     
+     }
+   
+     subgraph cluster13 { 
+       label="before";
+     
+       block_0_13; block_1_13; block_2_13; block_3_13; block_4_13; block_5_13; block_6_13;
+     
+     }
+   }
+ 
+   subgraph cluster9 { 
+     label="x=& y";
+   
+     invis_9;
+     subgraph cluster11 { 
+       label="after";
+     
+       block_0_11; block_1_11; block_2_11; block_3_11; block_4_11; block_5_11; block_6_11;
+     
+     }
+   
+     subgraph cluster10 { 
+       label="before";
+     
+       block_0_10; block_1_10; block_2_10; block_3_10; block_4_10; block_5_10; block_6_10;
+     
+     }
+   }
+ 
+   subgraph cluster6 { 
+     label="*(*x)=& f";
+   
+     invis_6;
+     subgraph cluster8 { 
+       label="after";
+     
+       block_0_8; block_1_8; block_2_8; block_3_8; block_4_8; block_5_8; block_6_8;
+     
+     }
+   
+     subgraph cluster7 { 
+       label="before";
+     
+       block_0_7; block_1_7; block_2_7; block_3_7; block_4_7; block_5_7; block_6_7;
+     
+     }
+   }
+ 
+   subgraph cluster3 { 
+     label="Return 0;\n";
+   
+     invis_3;
+     subgraph cluster5 { 
+       label="after";
+     
+       block_0_5; block_1_5; block_2_5; block_3_5; block_4_5; block_5_5; block_6_5;
+     
+     }
+   
+     subgraph cluster4 { 
+       label="before";
+     
+       block_0_4; block_1_4; block_2_4; block_3_4; block_4_4; block_5_4; block_6_4;
+     
+     }
+   }
+ 
+   subgraph cluster0 { 
+     label="y=& z";
+   
+     invis_0;
+     subgraph cluster2 { 
+       label="after";
+     
+       block_0_2; block_1_2; block_2_2; block_3_2; block_4_2; block_5_2; block_6_2;
+     
+     }
+   
+     subgraph cluster1 { 
+       label="before";
+     
+       block_0_1; block_1_1; block_2_1; block_3_1; block_4_1; block_5_1; block_6_1;
+     
+     }
+   }
+   invis_15 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_17 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_17 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_17 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_17 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_17 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_17 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_17 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_16 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="diamond"]; 
+   block_1_16 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_16 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_16 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_16 [label="f", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_16 [label="b", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_16 [label="main", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   invis_12 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_14 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_14 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_14 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_14 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_14 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_14 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_14 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_13 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_13 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_13 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_13 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_13 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_13 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_13 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_9 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_11 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_11 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_11 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_11 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_11 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_11 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_11 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_10 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_10 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_10 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_10 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_10 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_10 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_10 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_6 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_8 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_8 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_8 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_8 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_8 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_8 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_8 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_7 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_7 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_7 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_7 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_7 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_7 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_7 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_3 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_5 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_5 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_5 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_5 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_5 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_5 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_5 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_4 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_4 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_4 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_4 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_4 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_4 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_4 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_0 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_2 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_2 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_2 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_2 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_2 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_2 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_2 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_1 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_1 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_1 [label="y", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_1 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_1 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_1 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_1 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"];
+ 
+   invis_0 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster0", tailport="s", headport="n"]; 
+   invis_6 -> invis_3 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster3", ltail="cluster6", tailport="s", headport="n"]; 
+   invis_9 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster9", tailport="s", headport="n"]; 
+   invis_12 -> invis_9 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster9", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_12 -> invis_0 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster0", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_15 -> invis_12 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster12", ltail="cluster15", tailport="s", headport="n"]; 
+   block_0_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_6_17 [label="", style="solid", weight="10"]; 
+   block_6_16 -> block_6_16 [label="", style="solid", weight="10"]; 
+   block_0_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_6_14 [label="", style="solid", weight="10"]; 
+   block_0_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_6_13 [label="", style="solid", weight="10"]; 
+   block_0_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_2_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_6_11 [label="", style="solid", weight="10"]; 
+   block_0_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_6_10 [label="", style="solid", weight="10"]; 
+   block_0_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_6_8 [label="", style="solid", weight="10"]; 
+   block_0_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_2_7 [label="", style="dotted", weight="5"]; 
+   block_2_7 -> block_3_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_6_7 [label="", style="solid", weight="10"]; 
+   block_0_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_6_5 [label="", style="solid", weight="10"]; 
+   block_0_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_6_4 [label="", style="solid", weight="10"]; 
+   block_0_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_2_2 -> block_3_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_6_2 [label="", style="solid", weight="10"]; 
+   block_0_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_6_1 [label="", style="solid", weight="10"];
+ 
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/orig/test2.dot trunk/test/oops/alias/orig/test2.dot
*** orig/test/oops/alias/orig/test2.dot	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/orig/test2.dot	2010-01-24 18:04:24.000000000 +0300
***************
*** 0 ****
--- 1,863 ----
+ digraph X { 
+   label=""; compound="true"; center="true"; fontsize="10";
+ 
+   subgraph cluster24 { 
+     label="Start";
+   
+     invis_24;
+     subgraph cluster26 { 
+       label="after";
+     
+       block_0_26; block_1_26; block_2_26; block_3_26; block_4_26; block_5_26; block_7_26; block_8_26; block_10_26; block_11_26;
+       subgraph cluster26_218 { 
+       label="";
+     block_6_26; block_4_26; block_5_26}
+     
+       subgraph cluster26_215 { 
+       label="";
+     block_9_26; block_7_26; block_8_26}
+     }
+   
+     subgraph cluster25 { 
+       label="before";
+     
+       block_0_25; block_1_25; block_2_25; block_3_25; block_4_25; block_5_25; block_7_25; block_8_25; block_10_25; block_11_25;
+       subgraph cluster25_206 { 
+       label="";
+     block_6_25; block_4_25; block_5_25}
+     
+       subgraph cluster25_203 { 
+       label="";
+     block_9_25; block_7_25; block_8_25}
+     }
+   }
+ 
+   subgraph cluster21 { 
+     label="x=& t";
+   
+     invis_21;
+     subgraph cluster23 { 
+       label="after";
+     
+       block_0_23; block_1_23; block_2_23; block_3_23; block_4_23; block_5_23; block_7_23; block_8_23; block_10_23; block_11_23;
+       subgraph cluster23_193 { 
+       label="";
+     block_6_23; block_4_23; block_5_23}
+     
+       subgraph cluster23_190 { 
+       label="";
+     block_9_23; block_7_23; block_8_23}
+     }
+   
+     subgraph cluster22 { 
+       label="before";
+     
+       block_0_22; block_1_22; block_2_22; block_3_22; block_4_22; block_5_22; block_7_22; block_8_22; block_10_22; block_11_22;
+       subgraph cluster22_181 { 
+       label="";
+     block_6_22; block_4_22; block_5_22}
+     
+       subgraph cluster22_178 { 
+       label="";
+     block_9_22; block_7_22; block_8_22}
+     }
+   }
+ 
+   subgraph cluster18 { 
+     label="Branch (t == 1)";
+   
+     invis_18;
+     subgraph cluster20 { 
+       label="after";
+     
+       block_0_20; block_1_20; block_2_20; block_3_20; block_4_20; block_5_20; block_7_20; block_8_20; block_10_20; block_11_20;
+       subgraph cluster20_168 { 
+       label="";
+     block_6_20; block_4_20; block_5_20}
+     
+       subgraph cluster20_165 { 
+       label="";
+     block_9_20; block_7_20; block_8_20}
+     }
+   
+     subgraph cluster19 { 
+       label="before";
+     
+       block_0_19; block_1_19; block_2_19; block_3_19; block_4_19; block_5_19; block_7_19; block_8_19; block_10_19; block_11_19;
+       subgraph cluster19_156 { 
+       label="";
+     block_6_19; block_4_19; block_5_19}
+     
+       subgraph cluster19_153 { 
+       label="";
+     block_9_19; block_7_19; block_8_19}
+     }
+   }
+ 
+   subgraph cluster15 { 
+     label="pairPtr=& y";
+   
+     invis_15;
+     subgraph cluster17 { 
+       label="after";
+     
+       block_0_17; block_1_17; block_2_17; block_3_17; block_4_17; block_5_17; block_7_17; block_8_17; block_10_17; block_11_17;
+       subgraph cluster17_143 { 
+       label="";
+     block_6_17; block_4_17; block_5_17}
+     
+       subgraph cluster17_140 { 
+       label="";
+     block_9_17; block_7_17; block_8_17}
+     }
+   
+     subgraph cluster16 { 
+       label="before";
+     
+       block_0_16; block_1_16; block_2_16; block_3_16; block_4_16; block_5_16; block_7_16; block_8_16; block_10_16; block_11_16;
+       subgraph cluster16_131 { 
+       label="";
+     block_6_16; block_4_16; block_5_16}
+     
+       subgraph cluster16_128 { 
+       label="";
+     block_9_16; block_7_16; block_8_16}
+     }
+   }
+ 
+   subgraph cluster12 { 
+     label="pairPtr->a=x";
+   
+     invis_12;
+     subgraph cluster14 { 
+       label="after";
+     
+       block_0_14; block_1_14; block_2_14; block_3_14; block_4_14; block_5_14; block_7_14; block_8_14; block_10_14; block_11_14;
+       subgraph cluster14_118 { 
+       label="";
+     block_6_14; block_4_14; block_5_14}
+     
+       subgraph cluster14_115 { 
+       label="";
+     block_9_14; block_7_14; block_8_14}
+     }
+   
+     subgraph cluster13 { 
+       label="before";
+     
+       block_0_13; block_1_13; block_2_13; block_3_13; block_4_13; block_5_13; block_7_13; block_8_13; block_10_13; block_11_13;
+       subgraph cluster13_106 { 
+       label="";
+     block_6_13; block_4_13; block_5_13}
+     
+       subgraph cluster13_103 { 
+       label="";
+     block_9_13; block_7_13; block_8_13}
+     }
+   }
+ 
+   subgraph cluster9 { 
+     label="pairPtr->b=pairPtr->a";
+   
+     invis_9;
+     subgraph cluster11 { 
+       label="after";
+     
+       block_0_11; block_1_11; block_2_11; block_3_11; block_4_11; block_5_11; block_7_11; block_8_11; block_10_11; block_11_11;
+       subgraph cluster11_93 { 
+       label="";
+     block_6_11; block_4_11; block_5_11}
+     
+       subgraph cluster11_90 { 
+       label="";
+     block_9_11; block_7_11; block_8_11}
+     }
+   
+     subgraph cluster10 { 
+       label="before";
+     
+       block_0_10; block_1_10; block_2_10; block_3_10; block_4_10; block_5_10; block_7_10; block_8_10; block_10_10; block_11_10;
+       subgraph cluster10_81 { 
+       label="";
+     block_6_10; block_4_10; block_5_10}
+     
+       subgraph cluster10_78 { 
+       label="";
+     block_9_10; block_7_10; block_8_10}
+     }
+   }
+ 
+   subgraph cluster6 { 
+     label="Calll& x";
+   
+     invis_6;
+     subgraph cluster8 { 
+       label="after";
+     
+       block_0_8; block_1_8; block_2_8; block_3_8; block_4_8; block_5_8; block_7_8; block_8_8; block_10_8; block_11_8;
+       subgraph cluster8_68 { 
+       label="";
+     block_6_8; block_4_8; block_5_8}
+     
+       subgraph cluster8_65 { 
+       label="";
+     block_9_8; block_7_8; block_8_8}
+     }
+   
+     subgraph cluster7 { 
+       label="before";
+     
+       block_0_7; block_1_7; block_2_7; block_3_7; block_4_7; block_5_7; block_7_7; block_8_7; block_10_7; block_11_7;
+       subgraph cluster7_56 { 
+       label="";
+     block_6_7; block_4_7; block_5_7}
+     
+       subgraph cluster7_53 { 
+       label="";
+     block_9_7; block_7_7; block_8_7}
+     }
+   }
+ 
+   subgraph cluster3 { 
+     label="Return ;\n";
+   
+     invis_3;
+     subgraph cluster5 { 
+       label="after";
+     
+       block_0_5; block_1_5; block_2_5; block_3_5; block_4_5; block_5_5; block_7_5; block_8_5; block_10_5; block_11_5;
+       subgraph cluster5_43 { 
+       label="";
+     block_6_5; block_4_5; block_5_5}
+     
+       subgraph cluster5_40 { 
+       label="";
+     block_9_5; block_7_5; block_8_5}
+     }
+   
+     subgraph cluster4 { 
+       label="before";
+     
+       block_0_4; block_1_4; block_2_4; block_3_4; block_4_4; block_5_4; block_7_4; block_8_4; block_10_4; block_11_4;
+       subgraph cluster4_31 { 
+       label="";
+     block_6_4; block_4_4; block_5_4}
+     
+       subgraph cluster4_28 { 
+       label="";
+     block_9_4; block_7_4; block_8_4}
+     }
+   }
+ 
+   subgraph cluster0 { 
+     label="pairPtr=& z";
+   
+     invis_0;
+     subgraph cluster2 { 
+       label="after";
+     
+       block_0_2; block_1_2; block_2_2; block_3_2; block_4_2; block_5_2; block_7_2; block_8_2; block_10_2; block_11_2;
+       subgraph cluster2_18 { 
+       label="";
+     block_6_2; block_4_2; block_5_2}
+     
+       subgraph cluster2_15 { 
+       label="";
+     block_9_2; block_7_2; block_8_2}
+     }
+   
+     subgraph cluster1 { 
+       label="before";
+     
+       block_0_1; block_1_1; block_2_1; block_3_1; block_4_1; block_5_1; block_7_1; block_8_1; block_10_1; block_11_1;
+       subgraph cluster1_6 { 
+       label="";
+     block_6_1; block_4_1; block_5_1}
+     
+       subgraph cluster1_3 { 
+       label="";
+     block_9_1; block_7_1; block_8_1}
+     }
+   }
+   invis_24 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_26 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_26 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_26 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_26 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_26 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_26 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_26 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_26 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_26 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_26 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_26 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_26 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_25 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="diamond"]; 
+   block_2_25 [label="t", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_25 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_25 [label="b", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_25 [label="a", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_6_25 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_25 [label="b", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_7_25 [label="a", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_9_25 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_25 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_25 [label="f", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_1_25 [label="l", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   invis_21 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_23 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_23 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_23 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_23 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_23 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_23 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_23 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_23 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_23 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_23 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_23 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_23 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_22 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_22 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_22 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_22 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_22 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_22 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_22 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_22 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_22 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_22 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_22 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_22 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_18 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_20 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_20 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_20 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_20 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_20 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_20 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_20 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_20 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_20 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_20 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_20 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_20 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_19 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_19 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_19 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_19 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_19 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_19 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_19 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_19 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_19 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_19 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_19 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_19 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_15 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_17 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_17 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_17 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_17 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_17 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_17 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_17 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_17 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_17 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_17 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_17 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_17 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_16 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_16 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_16 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_16 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_16 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_16 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_16 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_16 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_16 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_16 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_16 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_16 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_12 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_14 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_14 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_14 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_14 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_14 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_14 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_14 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_14 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_14 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_14 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_14 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_14 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_13 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_13 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_13 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_13 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_13 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_13 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_13 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_13 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_13 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_13 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_13 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_13 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_9 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_11 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_11 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_11 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_11 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_11 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_11 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_11 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_11 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_11 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_11 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_11 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_11 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_10 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_10 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_10 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_10 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_10 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_10 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_10 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_10 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_10 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_10 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_10 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_10 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_6 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_8 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_8 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_8 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_8 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_8 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_8 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_8 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_8 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_8 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_8 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_8 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_8 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_7 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_7 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_7 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_7 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_7 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_7 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_7 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_7 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_7 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_7 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_7 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_7 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_3 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_5 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_5 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_5 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_5 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_5 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_5 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_5 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_5 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_5 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_5 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_5 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_5 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_4 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_4 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_4 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_4 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_4 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_4 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_4 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_4 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_4 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_4 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_4 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_4 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_0 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_11_2 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_2 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_2 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_2 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_2 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_2 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_2 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_2 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_2 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_2 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_2 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_2 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_11_1 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_1 [label="t", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_1 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_1 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_1 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_1 [label="y", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_8_1 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_1 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_9_1 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_10_1 [label="pairPtr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_1 [label="f", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_1 [label="l", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"];
+ 
+   invis_0 -> invis_12 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster12", ltail="cluster0", tailport="s", headport="n"]; 
+   invis_6 -> invis_3 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster3", ltail="cluster6", tailport="s", headport="n"]; 
+   invis_9 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster9", tailport="s", headport="n"]; 
+   invis_12 -> invis_9 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster9", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_15 -> invis_12 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster12", ltail="cluster15", tailport="s", headport="n"]; 
+   invis_18 -> invis_15 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster15", ltail="cluster18", tailport="s", headport="n"]; 
+   invis_18 -> invis_0 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster0", ltail="cluster18", tailport="s", headport="n"]; 
+   invis_21 -> invis_18 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster18", ltail="cluster21", tailport="s", headport="n"]; 
+   invis_24 -> invis_21 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster21", ltail="cluster24", tailport="s", headport="n"]; 
+   block_0_26 -> block_0_26 [label="", style="dotted", weight="5"]; 
+   block_0_26 -> block_1_26 [label="", style="dotted", weight="5"]; 
+   block_0_26 -> block_11_26 [label="", style="dotted", weight="5"]; 
+   block_1_26 -> block_0_26 [label="", style="dotted", weight="5"]; 
+   block_1_26 -> block_1_26 [label="", style="dotted", weight="5"]; 
+   block_1_26 -> block_11_26 [label="", style="dotted", weight="5"]; 
+   block_11_26 -> block_0_26 [label="", style="dotted", weight="5"]; 
+   block_11_26 -> block_1_26 [label="", style="dotted", weight="5"]; 
+   block_11_26 -> block_11_26 [label="", style="dotted", weight="5"]; 
+   block_11_26 -> block_11_26 [label="", style="solid", weight="10"]; 
+   block_6_26 -> block_5_26 [label="", style="solid", weight="10"]; 
+   block_6_26 -> block_4_26 [label="", style="solid", weight="10"]; 
+   block_9_26 -> block_8_26 [label="", style="solid", weight="10"]; 
+   block_9_26 -> block_7_26 [label="", style="solid", weight="10"]; 
+   block_11_25 -> block_11_25 [label="", style="solid", weight="10"]; 
+   block_6_25 -> block_5_25 [label="", style="solid", weight="10"]; 
+   block_6_25 -> block_4_25 [label="", style="solid", weight="10"]; 
+   block_9_25 -> block_8_25 [label="", style="solid", weight="10"]; 
+   block_9_25 -> block_7_25 [label="", style="solid", weight="10"]; 
+   block_0_23 -> block_0_23 [label="", style="dotted", weight="5"]; 
+   block_0_23 -> block_1_23 [label="", style="dotted", weight="5"]; 
+   block_0_23 -> block_11_23 [label="", style="dotted", weight="5"]; 
+   block_1_23 -> block_0_23 [label="", style="dotted", weight="5"]; 
+   block_1_23 -> block_1_23 [label="", style="dotted", weight="5"]; 
+   block_1_23 -> block_11_23 [label="", style="dotted", weight="5"]; 
+   block_3_23 -> block_2_23 [label="", style="dotted", weight="5"]; 
+   block_11_23 -> block_0_23 [label="", style="dotted", weight="5"]; 
+   block_11_23 -> block_1_23 [label="", style="dotted", weight="5"]; 
+   block_11_23 -> block_11_23 [label="", style="dotted", weight="5"]; 
+   block_11_23 -> block_11_23 [label="", style="solid", weight="10"]; 
+   block_6_23 -> block_5_23 [label="", style="solid", weight="10"]; 
+   block_6_23 -> block_4_23 [label="", style="solid", weight="10"]; 
+   block_9_23 -> block_8_23 [label="", style="solid", weight="10"]; 
+   block_9_23 -> block_7_23 [label="", style="solid", weight="10"]; 
+   block_0_22 -> block_0_22 [label="", style="dotted", weight="5"]; 
+   block_0_22 -> block_1_22 [label="", style="dotted", weight="5"]; 
+   block_0_22 -> block_11_22 [label="", style="dotted", weight="5"]; 
+   block_1_22 -> block_0_22 [label="", style="dotted", weight="5"]; 
+   block_1_22 -> block_1_22 [label="", style="dotted", weight="5"]; 
+   block_1_22 -> block_11_22 [label="", style="dotted", weight="5"]; 
+   block_11_22 -> block_0_22 [label="", style="dotted", weight="5"]; 
+   block_11_22 -> block_1_22 [label="", style="dotted", weight="5"]; 
+   block_11_22 -> block_11_22 [label="", style="dotted", weight="5"]; 
+   block_11_22 -> block_11_22 [label="", style="solid", weight="10"]; 
+   block_6_22 -> block_5_22 [label="", style="solid", weight="10"]; 
+   block_6_22 -> block_4_22 [label="", style="solid", weight="10"]; 
+   block_9_22 -> block_8_22 [label="", style="solid", weight="10"]; 
+   block_9_22 -> block_7_22 [label="", style="solid", weight="10"]; 
+   block_0_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_0_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_0_20 -> block_11_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_11_20 [label="", style="dotted", weight="5"]; 
+   block_3_20 -> block_2_20 [label="", style="dotted", weight="5"]; 
+   block_11_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_11_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_11_20 -> block_11_20 [label="", style="dotted", weight="5"]; 
+   block_11_20 -> block_11_20 [label="", style="solid", weight="10"]; 
+   block_6_20 -> block_5_20 [label="", style="solid", weight="10"]; 
+   block_6_20 -> block_4_20 [label="", style="solid", weight="10"]; 
+   block_9_20 -> block_8_20 [label="", style="solid", weight="10"]; 
+   block_9_20 -> block_7_20 [label="", style="solid", weight="10"]; 
+   block_0_19 -> block_0_19 [label="", style="dotted", weight="5"]; 
+   block_0_19 -> block_1_19 [label="", style="dotted", weight="5"]; 
+   block_0_19 -> block_11_19 [label="", style="dotted", weight="5"]; 
+   block_1_19 -> block_0_19 [label="", style="dotted", weight="5"]; 
+   block_1_19 -> block_1_19 [label="", style="dotted", weight="5"]; 
+   block_1_19 -> block_11_19 [label="", style="dotted", weight="5"]; 
+   block_3_19 -> block_2_19 [label="", style="dotted", weight="5"]; 
+   block_11_19 -> block_0_19 [label="", style="dotted", weight="5"]; 
+   block_11_19 -> block_1_19 [label="", style="dotted", weight="5"]; 
+   block_11_19 -> block_11_19 [label="", style="dotted", weight="5"]; 
+   block_11_19 -> block_11_19 [label="", style="solid", weight="10"]; 
+   block_6_19 -> block_5_19 [label="", style="solid", weight="10"]; 
+   block_6_19 -> block_4_19 [label="", style="solid", weight="10"]; 
+   block_9_19 -> block_8_19 [label="", style="solid", weight="10"]; 
+   block_9_19 -> block_7_19 [label="", style="solid", weight="10"]; 
+   block_0_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_11_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_11_17 [label="", style="dotted", weight="5"]; 
+   block_3_17 -> block_2_17 [label="", style="dotted", weight="5"]; 
+   block_10_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_11_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_11_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_11_17 -> block_11_17 [label="", style="dotted", weight="5"]; 
+   block_11_17 -> block_11_17 [label="", style="solid", weight="10"]; 
+   block_6_17 -> block_5_17 [label="", style="solid", weight="10"]; 
+   block_6_17 -> block_4_17 [label="", style="solid", weight="10"]; 
+   block_9_17 -> block_8_17 [label="", style="solid", weight="10"]; 
+   block_9_17 -> block_7_17 [label="", style="solid", weight="10"]; 
+   block_0_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_0_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_0_16 -> block_11_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_11_16 [label="", style="dotted", weight="5"]; 
+   block_3_16 -> block_2_16 [label="", style="dotted", weight="5"]; 
+   block_11_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_11_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_11_16 -> block_11_16 [label="", style="dotted", weight="5"]; 
+   block_11_16 -> block_11_16 [label="", style="solid", weight="10"]; 
+   block_6_16 -> block_5_16 [label="", style="solid", weight="10"]; 
+   block_6_16 -> block_4_16 [label="", style="solid", weight="10"]; 
+   block_9_16 -> block_8_16 [label="", style="solid", weight="10"]; 
+   block_9_16 -> block_7_16 [label="", style="solid", weight="10"]; 
+   block_0_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_11_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_11_14 [label="", style="dotted", weight="5"]; 
+   block_3_14 -> block_2_14 [label="", style="dotted", weight="5"]; 
+   block_4_14 -> block_2_14 [label="", style="dotted", weight="5"]; 
+   block_7_14 -> block_2_14 [label="", style="dotted", weight="5"]; 
+   block_10_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_10_14 -> block_9_14 [label="", style="dotted", weight="5"]; 
+   block_11_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_11_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_11_14 -> block_11_14 [label="", style="dotted", weight="5"]; 
+   block_11_14 -> block_11_14 [label="", style="solid", weight="10"]; 
+   block_6_14 -> block_5_14 [label="", style="solid", weight="10"]; 
+   block_6_14 -> block_4_14 [label="", style="solid", weight="10"]; 
+   block_9_14 -> block_8_14 [label="", style="solid", weight="10"]; 
+   block_9_14 -> block_7_14 [label="", style="solid", weight="10"]; 
+   block_0_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_11_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_11_13 [label="", style="dotted", weight="5"]; 
+   block_3_13 -> block_2_13 [label="", style="dotted", weight="5"]; 
+   block_10_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_10_13 -> block_9_13 [label="", style="dotted", weight="5"]; 
+   block_11_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_11_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_11_13 -> block_11_13 [label="", style="dotted", weight="5"]; 
+   block_11_13 -> block_11_13 [label="", style="solid", weight="10"]; 
+   block_6_13 -> block_5_13 [label="", style="solid", weight="10"]; 
+   block_6_13 -> block_4_13 [label="", style="solid", weight="10"]; 
+   block_9_13 -> block_8_13 [label="", style="solid", weight="10"]; 
+   block_9_13 -> block_7_13 [label="", style="solid", weight="10"]; 
+   block_0_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_11_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_11_11 [label="", style="dotted", weight="5"]; 
+   block_3_11 -> block_2_11 [label="", style="dotted", weight="5"]; 
+   block_4_11 -> block_2_11 [label="", style="dotted", weight="5"]; 
+   block_5_11 -> block_2_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_2_11 [label="", style="dotted", weight="5"]; 
+   block_8_11 -> block_2_11 [label="", style="dotted", weight="5"]; 
+   block_10_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_10_11 -> block_9_11 [label="", style="dotted", weight="5"]; 
+   block_11_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_11_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_11_11 -> block_11_11 [label="", style="dotted", weight="5"]; 
+   block_11_11 -> block_11_11 [label="", style="solid", weight="10"]; 
+   block_6_11 -> block_5_11 [label="", style="solid", weight="10"]; 
+   block_6_11 -> block_4_11 [label="", style="solid", weight="10"]; 
+   block_9_11 -> block_8_11 [label="", style="solid", weight="10"]; 
+   block_9_11 -> block_7_11 [label="", style="solid", weight="10"]; 
+   block_0_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_11_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_11_10 [label="", style="dotted", weight="5"]; 
+   block_3_10 -> block_2_10 [label="", style="dotted", weight="5"]; 
+   block_4_10 -> block_2_10 [label="", style="dotted", weight="5"]; 
+   block_7_10 -> block_2_10 [label="", style="dotted", weight="5"]; 
+   block_10_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_10_10 -> block_9_10 [label="", style="dotted", weight="5"]; 
+   block_11_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_11_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_11_10 -> block_11_10 [label="", style="dotted", weight="5"]; 
+   block_11_10 -> block_11_10 [label="", style="solid", weight="10"]; 
+   block_6_10 -> block_5_10 [label="", style="solid", weight="10"]; 
+   block_6_10 -> block_4_10 [label="", style="solid", weight="10"]; 
+   block_9_10 -> block_8_10 [label="", style="solid", weight="10"]; 
+   block_9_10 -> block_7_10 [label="", style="solid", weight="10"]; 
+   block_0_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_11_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_11_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_11_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_11_8 [label="", style="dotted", weight="5"]; 
+   block_4_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_5_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_8_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_10_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_10_8 -> block_9_8 [label="", style="dotted", weight="5"]; 
+   block_11_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_11_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_11_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_11_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_11_8 -> block_11_8 [label="", style="dotted", weight="5"]; 
+   block_11_8 -> block_11_8 [label="", style="solid", weight="10"]; 
+   block_6_8 -> block_5_8 [label="", style="solid", weight="10"]; 
+   block_6_8 -> block_4_8 [label="", style="solid", weight="10"]; 
+   block_9_8 -> block_8_8 [label="", style="solid", weight="10"]; 
+   block_9_8 -> block_7_8 [label="", style="solid", weight="10"]; 
+   block_0_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_11_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_11_7 [label="", style="dotted", weight="5"]; 
+   block_3_7 -> block_2_7 [label="", style="dotted", weight="5"]; 
+   block_4_7 -> block_2_7 [label="", style="dotted", weight="5"]; 
+   block_5_7 -> block_2_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_2_7 [label="", style="dotted", weight="5"]; 
+   block_8_7 -> block_2_7 [label="", style="dotted", weight="5"]; 
+   block_10_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_10_7 -> block_9_7 [label="", style="dotted", weight="5"]; 
+   block_11_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_11_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_11_7 -> block_11_7 [label="", style="dotted", weight="5"]; 
+   block_11_7 -> block_11_7 [label="", style="solid", weight="10"]; 
+   block_6_7 -> block_5_7 [label="", style="solid", weight="10"]; 
+   block_6_7 -> block_4_7 [label="", style="solid", weight="10"]; 
+   block_9_7 -> block_8_7 [label="", style="solid", weight="10"]; 
+   block_9_7 -> block_7_7 [label="", style="solid", weight="10"]; 
+   block_0_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_11_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_11_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_11_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_11_5 [label="", style="dotted", weight="5"]; 
+   block_4_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_5_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_8_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_10_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_10_5 -> block_9_5 [label="", style="dotted", weight="5"]; 
+   block_11_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_11_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_11_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_11_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_11_5 -> block_11_5 [label="", style="dotted", weight="5"]; 
+   block_11_5 -> block_11_5 [label="", style="solid", weight="10"]; 
+   block_6_5 -> block_5_5 [label="", style="solid", weight="10"]; 
+   block_6_5 -> block_4_5 [label="", style="solid", weight="10"]; 
+   block_9_5 -> block_8_5 [label="", style="solid", weight="10"]; 
+   block_9_5 -> block_7_5 [label="", style="solid", weight="10"]; 
+   block_0_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_11_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_11_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_11_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_11_4 [label="", style="dotted", weight="5"]; 
+   block_4_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_5_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_8_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_10_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_10_4 -> block_9_4 [label="", style="dotted", weight="5"]; 
+   block_11_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_11_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_11_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_11_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_11_4 -> block_11_4 [label="", style="dotted", weight="5"]; 
+   block_11_4 -> block_11_4 [label="", style="solid", weight="10"]; 
+   block_6_4 -> block_5_4 [label="", style="solid", weight="10"]; 
+   block_6_4 -> block_4_4 [label="", style="solid", weight="10"]; 
+   block_9_4 -> block_8_4 [label="", style="solid", weight="10"]; 
+   block_9_4 -> block_7_4 [label="", style="solid", weight="10"]; 
+   block_0_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_11_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_11_2 [label="", style="dotted", weight="5"]; 
+   block_3_2 -> block_2_2 [label="", style="dotted", weight="5"]; 
+   block_10_2 -> block_9_2 [label="", style="dotted", weight="5"]; 
+   block_11_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_11_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_11_2 -> block_11_2 [label="", style="dotted", weight="5"]; 
+   block_11_2 -> block_11_2 [label="", style="solid", weight="10"]; 
+   block_6_2 -> block_5_2 [label="", style="solid", weight="10"]; 
+   block_6_2 -> block_4_2 [label="", style="solid", weight="10"]; 
+   block_9_2 -> block_8_2 [label="", style="solid", weight="10"]; 
+   block_9_2 -> block_7_2 [label="", style="solid", weight="10"]; 
+   block_0_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_11_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_11_1 [label="", style="dotted", weight="5"]; 
+   block_3_1 -> block_2_1 [label="", style="dotted", weight="5"]; 
+   block_11_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_11_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_11_1 -> block_11_1 [label="", style="dotted", weight="5"]; 
+   block_11_1 -> block_11_1 [label="", style="solid", weight="10"]; 
+   block_6_1 -> block_5_1 [label="", style="solid", weight="10"]; 
+   block_6_1 -> block_4_1 [label="", style="solid", weight="10"]; 
+   block_9_1 -> block_8_1 [label="", style="solid", weight="10"]; 
+   block_9_1 -> block_7_1 [label="", style="solid", weight="10"];
+ 
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/orig/test3.dot trunk/test/oops/alias/orig/test3.dot
*** orig/test/oops/alias/orig/test3.dot	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/orig/test3.dot	2010-01-24 18:05:38.000000000 +0300
***************
*** 0 ****
--- 1,335 ----
+ digraph X { 
+   label=""; compound="true"; center="true"; fontsize="10";
+ 
+   subgraph cluster15 { 
+     label="Start";
+   
+     invis_15;
+     subgraph cluster17 { 
+       label="after";
+     
+       block_0_17; block_1_17; block_2_17; block_3_17; block_4_17; block_6_17;
+       subgraph cluster17_83 { 
+       label="";
+     block_5_17; block_3_17; block_4_17}
+     }
+   
+     subgraph cluster16 { 
+       label="before";
+     
+       block_0_16; block_1_16; block_2_16; block_3_16; block_4_16; block_6_16;
+       subgraph cluster16_76 { 
+       label="";
+     block_5_16; block_3_16; block_4_16}
+     }
+   }
+ 
+   subgraph cluster12 { 
+     label="Branch (z == 1)";
+   
+     invis_12;
+     subgraph cluster14 { 
+       label="after";
+     
+       block_0_14; block_1_14; block_2_14; block_3_14; block_4_14; block_6_14;
+       subgraph cluster14_68 { 
+       label="";
+     block_5_14; block_3_14; block_4_14}
+     }
+   
+     subgraph cluster13 { 
+       label="before";
+     
+       block_0_13; block_1_13; block_2_13; block_3_13; block_4_13; block_6_13;
+       subgraph cluster13_61 { 
+       label="";
+     block_5_13; block_3_13; block_4_13}
+     }
+   }
+ 
+   subgraph cluster9 { 
+     label="x=& p.a";
+   
+     invis_9;
+     subgraph cluster11 { 
+       label="after";
+     
+       block_0_11; block_1_11; block_2_11; block_3_11; block_4_11; block_6_11;
+       subgraph cluster11_53 { 
+       label="";
+     block_5_11; block_3_11; block_4_11}
+     }
+   
+     subgraph cluster10 { 
+       label="before";
+     
+       block_0_10; block_1_10; block_2_10; block_3_10; block_4_10; block_6_10;
+       subgraph cluster10_46 { 
+       label="";
+     block_5_10; block_3_10; block_4_10}
+     }
+   }
+ 
+   subgraph cluster6 { 
+     label="*x=& z";
+   
+     invis_6;
+     subgraph cluster8 { 
+       label="after";
+     
+       block_0_8; block_1_8; block_2_8; block_3_8; block_4_8; block_6_8;
+       subgraph cluster8_38 { 
+       label="";
+     block_5_8; block_3_8; block_4_8}
+     }
+   
+     subgraph cluster7 { 
+       label="before";
+     
+       block_0_7; block_1_7; block_2_7; block_3_7; block_4_7; block_6_7;
+       subgraph cluster7_31 { 
+       label="";
+     block_5_7; block_3_7; block_4_7}
+     }
+   }
+ 
+   subgraph cluster3 { 
+     label="Return ;\n";
+   
+     invis_3;
+     subgraph cluster5 { 
+       label="after";
+     
+       block_0_5; block_1_5; block_2_5; block_3_5; block_4_5; block_6_5;
+       subgraph cluster5_23 { 
+       label="";
+     block_5_5; block_3_5; block_4_5}
+     }
+   
+     subgraph cluster4 { 
+       label="before";
+     
+       block_0_4; block_1_4; block_2_4; block_3_4; block_4_4; block_6_4;
+       subgraph cluster4_16 { 
+       label="";
+     block_5_4; block_3_4; block_4_4}
+     }
+   }
+ 
+   subgraph cluster0 { 
+     label="x=& p.b";
+   
+     invis_0;
+     subgraph cluster2 { 
+       label="after";
+     
+       block_0_2; block_1_2; block_2_2; block_3_2; block_4_2; block_6_2;
+       subgraph cluster2_8 { 
+       label="";
+     block_5_2; block_3_2; block_4_2}
+     }
+   
+     subgraph cluster1 { 
+       label="before";
+     
+       block_0_1; block_1_1; block_2_1; block_3_1; block_4_1; block_6_1;
+       subgraph cluster1_1 { 
+       label="";
+     block_5_1; block_3_1; block_4_1}
+     }
+   }
+   invis_15 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_17 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_17 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_17 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_17 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_17 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_17 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_17 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_16 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="diamond"]; 
+   block_1_16 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_16 [label="z", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_16 [label="b", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_16 [label="a", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_16 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_16 [label="main", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   invis_12 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_14 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_14 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_14 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_14 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_14 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_14 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_14 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_13 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_13 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_13 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_13 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_13 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_13 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_13 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_9 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_11 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_11 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_11 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_11 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_11 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_11 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_11 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_10 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_10 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_10 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_10 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_10 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_10 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_10 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_6 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_8 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_8 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_8 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_8 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_8 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_8 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_8 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_7 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_7 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_7 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_7 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_7 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_7 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_7 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_3 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_5 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_5 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_5 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_5 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_5 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_5 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_5 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_4 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_4 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_4 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_4 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_4 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_4 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_4 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_0 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_2 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_2 [label="x", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_2 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_2 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_2 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_2 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_2 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_1 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_1 [label="x", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_1 [label="z", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_1 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_1 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_1 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_1 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"];
+ 
+   invis_0 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster0", tailport="s", headport="n"]; 
+   invis_6 -> invis_3 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster3", ltail="cluster6", tailport="s", headport="n"]; 
+   invis_9 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster9", tailport="s", headport="n"]; 
+   invis_12 -> invis_9 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster9", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_12 -> invis_0 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster0", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_15 -> invis_12 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster12", ltail="cluster15", tailport="s", headport="n"]; 
+   block_0_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_6_17 [label="", style="solid", weight="10"]; 
+   block_5_17 -> block_4_17 [label="", style="solid", weight="10"]; 
+   block_5_17 -> block_3_17 [label="", style="solid", weight="10"]; 
+   block_6_16 -> block_6_16 [label="", style="solid", weight="10"]; 
+   block_5_16 -> block_4_16 [label="", style="solid", weight="10"]; 
+   block_5_16 -> block_3_16 [label="", style="solid", weight="10"]; 
+   block_0_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_6_14 [label="", style="solid", weight="10"]; 
+   block_5_14 -> block_4_14 [label="", style="solid", weight="10"]; 
+   block_5_14 -> block_3_14 [label="", style="solid", weight="10"]; 
+   block_0_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_6_13 [label="", style="solid", weight="10"]; 
+   block_5_13 -> block_4_13 [label="", style="solid", weight="10"]; 
+   block_5_13 -> block_3_13 [label="", style="solid", weight="10"]; 
+   block_0_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_3_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_6_11 [label="", style="solid", weight="10"]; 
+   block_5_11 -> block_4_11 [label="", style="solid", weight="10"]; 
+   block_5_11 -> block_3_11 [label="", style="solid", weight="10"]; 
+   block_0_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_6_10 [label="", style="solid", weight="10"]; 
+   block_5_10 -> block_4_10 [label="", style="solid", weight="10"]; 
+   block_5_10 -> block_3_10 [label="", style="solid", weight="10"]; 
+   block_0_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_3_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_4_8 -> block_2_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_6_8 [label="", style="solid", weight="10"]; 
+   block_5_8 -> block_4_8 [label="", style="solid", weight="10"]; 
+   block_5_8 -> block_3_8 [label="", style="solid", weight="10"]; 
+   block_0_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_3_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_4_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_6_7 [label="", style="solid", weight="10"]; 
+   block_5_7 -> block_4_7 [label="", style="solid", weight="10"]; 
+   block_5_7 -> block_3_7 [label="", style="solid", weight="10"]; 
+   block_0_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_3_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_4_5 -> block_2_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_6_5 [label="", style="solid", weight="10"]; 
+   block_5_5 -> block_4_5 [label="", style="solid", weight="10"]; 
+   block_5_5 -> block_3_5 [label="", style="solid", weight="10"]; 
+   block_0_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_3_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_4_4 -> block_2_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_6_4 [label="", style="solid", weight="10"]; 
+   block_5_4 -> block_4_4 [label="", style="solid", weight="10"]; 
+   block_5_4 -> block_3_4 [label="", style="solid", weight="10"]; 
+   block_0_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_4_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_6_2 [label="", style="solid", weight="10"]; 
+   block_5_2 -> block_4_2 [label="", style="solid", weight="10"]; 
+   block_5_2 -> block_3_2 [label="", style="solid", weight="10"]; 
+   block_0_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_6_1 [label="", style="solid", weight="10"]; 
+   block_5_1 -> block_4_1 [label="", style="solid", weight="10"]; 
+   block_5_1 -> block_3_1 [label="", style="solid", weight="10"];
+ 
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/orig/test4.dot trunk/test/oops/alias/orig/test4.dot
*** orig/test/oops/alias/orig/test4.dot	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/orig/test4.dot	2010-01-24 18:07:07.000000000 +0300
***************
*** 0 ****
--- 1,533 ----
+ digraph X { 
+   label=""; compound="true"; center="true"; fontsize="10";
+ 
+   subgraph cluster24 { 
+     label="Start";
+   
+     invis_24;
+     subgraph cluster26 { 
+       label="after";
+     
+       block_0_26; block_1_26; block_2_26; block_3_26; block_4_26; block_5_26; block_6_26; block_7_26; block_8_26;
+     
+     }
+   
+     subgraph cluster25 { 
+       label="before";
+     
+       block_0_25; block_1_25; block_2_25; block_3_25; block_4_25; block_5_25; block_6_25; block_7_25; block_8_25;
+     
+     }
+   }
+ 
+   subgraph cluster21 { 
+     label="array[0]=& a";
+   
+     invis_21;
+     subgraph cluster23 { 
+       label="after";
+     
+       block_0_23; block_1_23; block_2_23; block_3_23; block_4_23; block_5_23; block_6_23; block_7_23; block_8_23;
+     
+     }
+   
+     subgraph cluster22 { 
+       label="before";
+     
+       block_0_22; block_1_22; block_2_22; block_3_22; block_4_22; block_5_22; block_6_22; block_7_22; block_8_22;
+     
+     }
+   }
+ 
+   subgraph cluster18 { 
+     label="p=array[0]";
+   
+     invis_18;
+     subgraph cluster20 { 
+       label="after";
+     
+       block_0_20; block_1_20; block_2_20; block_3_20; block_4_20; block_5_20; block_6_20; block_7_20; block_8_20;
+     
+     }
+   
+     subgraph cluster19 { 
+       label="before";
+     
+       block_0_19; block_1_19; block_2_19; block_3_19; block_4_19; block_5_19; block_6_19; block_7_19; block_8_19;
+     
+     }
+   }
+ 
+   subgraph cluster15 { 
+     label="array[1]=& b";
+   
+     invis_15;
+     subgraph cluster17 { 
+       label="after";
+     
+       block_0_17; block_1_17; block_2_17; block_3_17; block_4_17; block_5_17; block_6_17; block_7_17; block_8_17;
+     
+     }
+   
+     subgraph cluster16 { 
+       label="before";
+     
+       block_0_16; block_1_16; block_2_16; block_3_16; block_4_16; block_5_16; block_6_16; block_7_16; block_8_16;
+     
+     }
+   }
+ 
+   subgraph cluster12 { 
+     label="p=& a";
+   
+     invis_12;
+     subgraph cluster14 { 
+       label="after";
+     
+       block_0_14; block_1_14; block_2_14; block_3_14; block_4_14; block_5_14; block_6_14; block_7_14; block_8_14;
+     
+     }
+   
+     subgraph cluster13 { 
+       label="before";
+     
+       block_0_13; block_1_13; block_2_13; block_3_13; block_4_13; block_5_13; block_6_13; block_7_13; block_8_13;
+     
+     }
+   }
+ 
+   subgraph cluster9 { 
+     label="uvar.uptr1=& a";
+   
+     invis_9;
+     subgraph cluster11 { 
+       label="after";
+     
+       block_0_11; block_1_11; block_2_11; block_3_11; block_4_11; block_5_11; block_6_11; block_7_11; block_8_11;
+     
+     }
+   
+     subgraph cluster10 { 
+       label="before";
+     
+       block_0_10; block_1_10; block_2_10; block_3_10; block_4_10; block_5_10; block_6_10; block_7_10; block_8_10;
+     
+     }
+   }
+ 
+   subgraph cluster6 { 
+     label="uvar.uptr2=& b";
+   
+     invis_6;
+     subgraph cluster8 { 
+       label="after";
+     
+       block_0_8; block_1_8; block_2_8; block_3_8; block_4_8; block_5_8; block_6_8; block_7_8; block_8_8;
+     
+     }
+   
+     subgraph cluster7 { 
+       label="before";
+     
+       block_0_7; block_1_7; block_2_7; block_3_7; block_4_7; block_5_7; block_6_7; block_7_7; block_8_7;
+     
+     }
+   }
+ 
+   subgraph cluster3 { 
+     label="p=uvar.uptr1";
+   
+     invis_3;
+     subgraph cluster5 { 
+       label="after";
+     
+       block_0_5; block_1_5; block_2_5; block_3_5; block_4_5; block_5_5; block_6_5; block_7_5; block_8_5;
+     
+     }
+   
+     subgraph cluster4 { 
+       label="before";
+     
+       block_0_4; block_1_4; block_2_4; block_3_4; block_4_4; block_5_4; block_6_4; block_7_4; block_8_4;
+     
+     }
+   }
+ 
+   subgraph cluster0 { 
+     label="Return ;\n";
+   
+     invis_0;
+     subgraph cluster2 { 
+       label="after";
+     
+       block_0_2; block_1_2; block_2_2; block_3_2; block_4_2; block_5_2; block_6_2; block_7_2; block_8_2;
+     
+     }
+   
+     subgraph cluster1 { 
+       label="before";
+     
+       block_0_1; block_1_1; block_2_1; block_3_1; block_4_1; block_5_1; block_6_1; block_7_1; block_8_1;
+     
+     }
+   }
+   invis_24 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_26 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_26 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_26 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_26 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_26 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_26 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_26 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_26 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_26 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_25 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="diamond"]; 
+   block_1_25 [label="array", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_2_25 [label="array", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_25 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_25 [label="a", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_25 [label="b", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_6_25 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_7_25 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_25 [label="main", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   invis_21 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_23 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_23 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_23 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_23 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_23 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_23 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_23 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_23 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_23 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_22 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_22 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_22 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_22 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_22 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_22 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_22 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_22 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_22 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_18 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_20 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_20 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_20 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_20 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_20 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_20 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_20 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_20 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_20 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_19 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_19 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_19 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_19 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_19 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_19 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_19 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_19 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_19 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_15 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_17 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_17 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_17 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_17 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_17 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_17 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_17 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_17 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_17 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_16 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_16 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_16 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_16 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_16 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_16 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_16 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_16 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_16 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_12 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_14 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_14 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_14 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_14 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_14 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_14 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_14 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_14 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_14 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_13 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_13 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_13 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_13 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_13 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_13 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_13 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_13 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_13 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_9 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_11 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_11 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_11 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_11 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_11 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_11 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_11 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_11 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_11 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_10 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_10 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_10 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_10 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_10 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_10 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_10 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_10 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_10 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_6 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_8 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_8 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_8 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_8 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_8 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_8 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_8 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_8 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_8 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_7 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_7 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_7 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_7 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_7 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_7 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_7 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_7 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_7 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_3 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_5 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_5 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_5 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_5 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_5 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_5 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_5 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_5 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_5 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_4 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_4 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_4 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_4 [label="p", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_4 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_4 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_4 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_4 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_4 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_0 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_8_2 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_2 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_2 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_2 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_2 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_2 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_2 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_2 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_2 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_8_1 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_1_1 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_2_1 [label="array", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_1 [label="p", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_1 [label="a", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_1 [label="b", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_1 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_7_1 [label="uvar", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_1 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"];
+ 
+   invis_3 -> invis_0 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster0", ltail="cluster3", tailport="s", headport="n"]; 
+   invis_6 -> invis_3 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster3", ltail="cluster6", tailport="s", headport="n"]; 
+   invis_9 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster9", tailport="s", headport="n"]; 
+   invis_12 -> invis_9 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster9", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_15 -> invis_12 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster12", ltail="cluster15", tailport="s", headport="n"]; 
+   invis_18 -> invis_15 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster15", ltail="cluster18", tailport="s", headport="n"]; 
+   invis_21 -> invis_18 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster18", ltail="cluster21", tailport="s", headport="n"]; 
+   invis_24 -> invis_21 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster21", ltail="cluster24", tailport="s", headport="n"]; 
+   block_0_26 -> block_0_26 [label="", style="dotted", weight="5"]; 
+   block_0_26 -> block_8_26 [label="", style="dotted", weight="5"]; 
+   block_8_26 -> block_0_26 [label="", style="dotted", weight="5"]; 
+   block_8_26 -> block_8_26 [label="", style="dotted", weight="5"]; 
+   block_8_26 -> block_8_26 [label="", style="solid", weight="10"]; 
+   block_8_25 -> block_8_25 [label="", style="solid", weight="10"]; 
+   block_0_23 -> block_0_23 [label="", style="dotted", weight="5"]; 
+   block_0_23 -> block_8_23 [label="", style="dotted", weight="5"]; 
+   block_1_23 -> block_4_23 [label="", style="dotted", weight="5"]; 
+   block_2_23 -> block_4_23 [label="", style="dotted", weight="5"]; 
+   block_8_23 -> block_0_23 [label="", style="dotted", weight="5"]; 
+   block_8_23 -> block_8_23 [label="", style="dotted", weight="5"]; 
+   block_8_23 -> block_8_23 [label="", style="solid", weight="10"]; 
+   block_0_22 -> block_0_22 [label="", style="dotted", weight="5"]; 
+   block_0_22 -> block_8_22 [label="", style="dotted", weight="5"]; 
+   block_8_22 -> block_0_22 [label="", style="dotted", weight="5"]; 
+   block_8_22 -> block_8_22 [label="", style="dotted", weight="5"]; 
+   block_8_22 -> block_8_22 [label="", style="solid", weight="10"]; 
+   block_0_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_0_20 -> block_8_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_4_20 [label="", style="dotted", weight="5"]; 
+   block_2_20 -> block_4_20 [label="", style="dotted", weight="5"]; 
+   block_3_20 -> block_4_20 [label="", style="dotted", weight="5"]; 
+   block_8_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_8_20 -> block_8_20 [label="", style="dotted", weight="5"]; 
+   block_8_20 -> block_8_20 [label="", style="solid", weight="10"]; 
+   block_0_19 -> block_0_19 [label="", style="dotted", weight="5"]; 
+   block_0_19 -> block_8_19 [label="", style="dotted", weight="5"]; 
+   block_1_19 -> block_4_19 [label="", style="dotted", weight="5"]; 
+   block_2_19 -> block_4_19 [label="", style="dotted", weight="5"]; 
+   block_8_19 -> block_0_19 [label="", style="dotted", weight="5"]; 
+   block_8_19 -> block_8_19 [label="", style="dotted", weight="5"]; 
+   block_8_19 -> block_8_19 [label="", style="solid", weight="10"]; 
+   block_0_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_8_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_4_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_5_17 [label="", style="dotted", weight="5"]; 
+   block_2_17 -> block_4_17 [label="", style="dotted", weight="5"]; 
+   block_2_17 -> block_5_17 [label="", style="dotted", weight="5"]; 
+   block_3_17 -> block_4_17 [label="", style="dotted", weight="5"]; 
+   block_8_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_8_17 -> block_8_17 [label="", style="dotted", weight="5"]; 
+   block_8_17 -> block_8_17 [label="", style="solid", weight="10"]; 
+   block_0_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_0_16 -> block_8_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_4_16 [label="", style="dotted", weight="5"]; 
+   block_2_16 -> block_4_16 [label="", style="dotted", weight="5"]; 
+   block_3_16 -> block_4_16 [label="", style="dotted", weight="5"]; 
+   block_8_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_8_16 -> block_8_16 [label="", style="dotted", weight="5"]; 
+   block_8_16 -> block_8_16 [label="", style="solid", weight="10"]; 
+   block_0_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_8_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_4_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_5_14 [label="", style="dotted", weight="5"]; 
+   block_2_14 -> block_4_14 [label="", style="dotted", weight="5"]; 
+   block_2_14 -> block_5_14 [label="", style="dotted", weight="5"]; 
+   block_3_14 -> block_4_14 [label="", style="dotted", weight="5"]; 
+   block_8_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_8_14 -> block_8_14 [label="", style="dotted", weight="5"]; 
+   block_8_14 -> block_8_14 [label="", style="solid", weight="10"]; 
+   block_0_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_8_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_4_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_5_13 [label="", style="dotted", weight="5"]; 
+   block_2_13 -> block_4_13 [label="", style="dotted", weight="5"]; 
+   block_2_13 -> block_5_13 [label="", style="dotted", weight="5"]; 
+   block_3_13 -> block_4_13 [label="", style="dotted", weight="5"]; 
+   block_8_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_8_13 -> block_8_13 [label="", style="dotted", weight="5"]; 
+   block_8_13 -> block_8_13 [label="", style="solid", weight="10"]; 
+   block_0_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_8_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_4_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_5_11 [label="", style="dotted", weight="5"]; 
+   block_2_11 -> block_4_11 [label="", style="dotted", weight="5"]; 
+   block_2_11 -> block_5_11 [label="", style="dotted", weight="5"]; 
+   block_3_11 -> block_4_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_4_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_4_11 [label="", style="dotted", weight="5"]; 
+   block_8_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_8_11 -> block_8_11 [label="", style="dotted", weight="5"]; 
+   block_8_11 -> block_8_11 [label="", style="solid", weight="10"]; 
+   block_0_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_8_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_4_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_5_10 [label="", style="dotted", weight="5"]; 
+   block_2_10 -> block_4_10 [label="", style="dotted", weight="5"]; 
+   block_2_10 -> block_5_10 [label="", style="dotted", weight="5"]; 
+   block_3_10 -> block_4_10 [label="", style="dotted", weight="5"]; 
+   block_8_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_8_10 -> block_8_10 [label="", style="dotted", weight="5"]; 
+   block_8_10 -> block_8_10 [label="", style="solid", weight="10"]; 
+   block_0_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_8_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_5_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_5_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_5_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_4_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_5_8 [label="", style="dotted", weight="5"]; 
+   block_8_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_8_8 -> block_8_8 [label="", style="dotted", weight="5"]; 
+   block_8_8 -> block_8_8 [label="", style="solid", weight="10"]; 
+   block_0_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_8_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_4_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_5_7 [label="", style="dotted", weight="5"]; 
+   block_2_7 -> block_4_7 [label="", style="dotted", weight="5"]; 
+   block_2_7 -> block_5_7 [label="", style="dotted", weight="5"]; 
+   block_3_7 -> block_4_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_4_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_4_7 [label="", style="dotted", weight="5"]; 
+   block_8_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_8_7 -> block_8_7 [label="", style="dotted", weight="5"]; 
+   block_8_7 -> block_8_7 [label="", style="solid", weight="10"]; 
+   block_0_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_8_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_5_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_5_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_5_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_5_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_4_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_5_5 [label="", style="dotted", weight="5"]; 
+   block_8_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_8_5 -> block_8_5 [label="", style="dotted", weight="5"]; 
+   block_8_5 -> block_8_5 [label="", style="solid", weight="10"]; 
+   block_0_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_8_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_5_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_5_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_5_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_4_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_5_4 [label="", style="dotted", weight="5"]; 
+   block_8_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_8_4 -> block_8_4 [label="", style="dotted", weight="5"]; 
+   block_8_4 -> block_8_4 [label="", style="solid", weight="10"]; 
+   block_0_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_8_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_4_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_5_2 [label="", style="dotted", weight="5"]; 
+   block_2_2 -> block_4_2 [label="", style="dotted", weight="5"]; 
+   block_2_2 -> block_5_2 [label="", style="dotted", weight="5"]; 
+   block_3_2 -> block_4_2 [label="", style="dotted", weight="5"]; 
+   block_3_2 -> block_5_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_4_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_5_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_4_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_5_2 [label="", style="dotted", weight="5"]; 
+   block_8_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_8_2 -> block_8_2 [label="", style="dotted", weight="5"]; 
+   block_8_2 -> block_8_2 [label="", style="solid", weight="10"]; 
+   block_0_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_8_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_4_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_5_1 [label="", style="dotted", weight="5"]; 
+   block_2_1 -> block_4_1 [label="", style="dotted", weight="5"]; 
+   block_2_1 -> block_5_1 [label="", style="dotted", weight="5"]; 
+   block_3_1 -> block_4_1 [label="", style="dotted", weight="5"]; 
+   block_3_1 -> block_5_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_4_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_5_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_4_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_5_1 [label="", style="dotted", weight="5"]; 
+   block_8_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_8_1 -> block_8_1 [label="", style="dotted", weight="5"]; 
+   block_8_1 -> block_8_1 [label="", style="solid", weight="10"];
+ 
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/orig/test5.dot trunk/test/oops/alias/orig/test5.dot
*** orig/test/oops/alias/orig/test5.dot	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/orig/test5.dot	2010-01-24 18:09:02.000000000 +0300
***************
*** 0 ****
--- 1,520 ----
+ digraph X { 
+   label=""; compound="true"; center="true"; fontsize="10";
+ 
+   subgraph cluster18 { 
+     label="Start";
+   
+     invis_18;
+     subgraph cluster20 { 
+       label="after";
+     
+       block_0_20; block_1_20; block_2_20; block_3_20; block_4_20; block_5_20; block_6_20; block_7_20;
+     
+     }
+   
+     subgraph cluster19 { 
+       label="before";
+     
+       block_0_19; block_1_19; block_2_19; block_3_19; block_4_19; block_5_19; block_6_19; block_7_19;
+     
+     }
+   }
+ 
+   subgraph cluster15 { 
+     label="tmp = Callmallocsizeof(int )";
+   
+     invis_15;
+     subgraph cluster17 { 
+       label="after";
+     
+       block_0_17; block_1_17; block_2_17; block_3_17; block_4_17; block_5_17; block_6_17; block_7_17;
+     
+     }
+   
+     subgraph cluster16 { 
+       label="before";
+     
+       block_0_16; block_1_16; block_2_16; block_3_16; block_4_16; block_5_16; block_6_16; block_7_16;
+     
+     }
+   }
+ 
+   subgraph cluster12 { 
+     label="heap_ptr=(int *)tmp";
+   
+     invis_12;
+     subgraph cluster14 { 
+       label="after";
+     
+       block_0_14; block_1_14; block_2_14; block_3_14; block_4_14; block_5_14; block_6_14; block_7_14;
+     
+     }
+   
+     subgraph cluster13 { 
+       label="before";
+     
+       block_0_13; block_1_13; block_2_13; block_3_13; block_4_13; block_5_13; block_6_13; block_7_13;
+     
+     }
+   }
+ 
+   subgraph cluster9 { 
+     label="tmp___0=heap_ptr";
+   
+     invis_9;
+     subgraph cluster11 { 
+       label="after";
+     
+       block_0_11; block_1_11; block_2_11; block_3_11; block_4_11; block_5_11; block_6_11; block_7_11;
+     
+     }
+   
+     subgraph cluster10 { 
+       label="before";
+     
+       block_0_10; block_1_10; block_2_10; block_3_10; block_4_10; block_5_10; block_6_10; block_7_10;
+     
+     }
+   }
+ 
+   subgraph cluster6 { 
+     label="heap_ptr=heap_ptr + 1";
+   
+     invis_6;
+     subgraph cluster8 { 
+       label="after";
+     
+       block_0_8; block_1_8; block_2_8; block_3_8; block_4_8; block_5_8; block_6_8; block_7_8;
+     
+     }
+   
+     subgraph cluster7 { 
+       label="before";
+     
+       block_0_7; block_1_7; block_2_7; block_3_7; block_4_7; block_5_7; block_6_7; block_7_7;
+     
+     }
+   }
+ 
+   subgraph cluster3 { 
+     label="anyHeap=tmp___0";
+   
+     invis_3;
+     subgraph cluster5 { 
+       label="after";
+     
+       block_0_5; block_1_5; block_2_5; block_3_5; block_4_5; block_5_5; block_6_5; block_7_5;
+     
+     }
+   
+     subgraph cluster4 { 
+       label="before";
+     
+       block_0_4; block_1_4; block_2_4; block_3_4; block_4_4; block_5_4; block_6_4; block_7_4;
+     
+     }
+   }
+ 
+   subgraph cluster0 { 
+     label="Return ;\n";
+   
+     invis_0;
+     subgraph cluster2 { 
+       label="after";
+     
+       block_0_2; block_1_2; block_2_2; block_3_2; block_4_2; block_5_2; block_6_2; block_7_2;
+     
+     }
+   
+     subgraph cluster1 { 
+       label="before";
+     
+       block_0_1; block_1_1; block_2_1; block_3_1; block_4_1; block_5_1; block_6_1; block_7_1;
+     
+     }
+   }
+   invis_18 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_20 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_20 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_20 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_20 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_20 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_20 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_20 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_20 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_19 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="blue"]; 
+   block_7_19 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="diamond"]; 
+   block_2_19 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_19 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_19 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_19 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_19 [label="main", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_1_19 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   invis_15 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_17 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_17 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_17 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_17 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_17 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_17 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_17 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_17 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_16 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_16 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_16 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_16 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_4_16 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_16 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_16 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_16 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_12 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_14 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_14 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_14 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_14 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_14 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_14 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_14 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_14 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_13 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_13 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_13 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_3_13 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_13 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_13 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_13 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_13 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_9 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_11 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_11 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_11 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_11 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_11 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_11 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_11 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_11 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_10 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_10 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_10 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_10 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_10 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_10 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_0_10 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_10 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_6 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_8 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_8 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_8 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_8 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_8 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_8 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_8 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_8 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_7 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_7 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_7 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_7 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_7 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_7 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_7 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_7 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_3 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_5 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_5 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_5 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_5 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_5 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_5 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_5 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_5 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_4 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_4 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_4 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_4 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_4 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_5_4 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_4 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_4 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   invis_0 [label="", heigh="0.25", width="0.5", fontsize="10", color="white", style="invis", width="0"]; 
+   block_6_2 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_2 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_2 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_2 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_2 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_2 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_2 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_2 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_6_1 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green"]; 
+   block_7_1 [label="Pseudo: Heap", heigh="0.25", width="0.5", fontsize="10", color="green", shape="diamond"]; 
+   block_2_1 [label="heap_ptr", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_3_1 [label="tmp", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_4_1 [label="anyHeap", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_5_1 [label="tmp___0", heigh="0.25", width="0.5", fontsize="10", color="blue", shape="box"]; 
+   block_0_1 [label="main", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"]; 
+   block_1_1 [label="malloc", heigh="0.25", width="0.5", fontsize="10", color="green", shape="box"];
+ 
+   invis_3 -> invis_0 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster0", ltail="cluster3", tailport="s", headport="n"]; 
+   invis_6 -> invis_3 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster3", ltail="cluster6", tailport="s", headport="n"]; 
+   invis_9 -> invis_6 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster6", ltail="cluster9", tailport="s", headport="n"]; 
+   invis_12 -> invis_9 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster9", ltail="cluster12", tailport="s", headport="n"]; 
+   invis_15 -> invis_12 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster12", ltail="cluster15", tailport="s", headport="n"]; 
+   invis_18 -> invis_15 [label="", minlen="3", weight="1", style="solid", color="red", lhead="cluster15", ltail="cluster18", tailport="s", headport="n"]; 
+   block_0_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_0_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_0_20 -> block_6_20 [label="", style="dotted", weight="5"]; 
+   block_0_20 -> block_7_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_6_20 [label="", style="dotted", weight="5"]; 
+   block_1_20 -> block_7_20 [label="", style="dotted", weight="5"]; 
+   block_6_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_6_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_6_20 -> block_6_20 [label="", style="dotted", weight="5"]; 
+   block_6_20 -> block_7_20 [label="", style="dotted", weight="5"]; 
+   block_7_20 -> block_0_20 [label="", style="dotted", weight="5"]; 
+   block_7_20 -> block_1_20 [label="", style="dotted", weight="5"]; 
+   block_7_20 -> block_6_20 [label="", style="dotted", weight="5"]; 
+   block_7_20 -> block_7_20 [label="", style="dotted", weight="5"]; 
+   block_7_20 -> block_7_20 [label="", style="solid", weight="10"]; 
+   block_7_19 -> block_7_19 [label="", style="solid", weight="10"]; 
+   block_0_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_0_17 -> block_7_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_1_17 -> block_7_17 [label="", style="dotted", weight="5"]; 
+   block_3_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_6_17 -> block_7_17 [label="", style="dotted", weight="5"]; 
+   block_7_17 -> block_0_17 [label="", style="dotted", weight="5"]; 
+   block_7_17 -> block_1_17 [label="", style="dotted", weight="5"]; 
+   block_7_17 -> block_6_17 [label="", style="dotted", weight="5"]; 
+   block_7_17 -> block_7_17 [label="", style="dotted", weight="5"]; 
+   block_7_17 -> block_7_17 [label="", style="solid", weight="10"]; 
+   block_0_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_0_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_0_16 -> block_6_16 [label="", style="dotted", weight="5"]; 
+   block_0_16 -> block_7_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_6_16 [label="", style="dotted", weight="5"]; 
+   block_1_16 -> block_7_16 [label="", style="dotted", weight="5"]; 
+   block_6_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_6_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_6_16 -> block_6_16 [label="", style="dotted", weight="5"]; 
+   block_6_16 -> block_7_16 [label="", style="dotted", weight="5"]; 
+   block_7_16 -> block_0_16 [label="", style="dotted", weight="5"]; 
+   block_7_16 -> block_1_16 [label="", style="dotted", weight="5"]; 
+   block_7_16 -> block_6_16 [label="", style="dotted", weight="5"]; 
+   block_7_16 -> block_7_16 [label="", style="dotted", weight="5"]; 
+   block_7_16 -> block_7_16 [label="", style="solid", weight="10"]; 
+   block_0_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_0_14 -> block_7_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_1_14 -> block_7_14 [label="", style="dotted", weight="5"]; 
+   block_2_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_3_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_6_14 -> block_7_14 [label="", style="dotted", weight="5"]; 
+   block_7_14 -> block_0_14 [label="", style="dotted", weight="5"]; 
+   block_7_14 -> block_1_14 [label="", style="dotted", weight="5"]; 
+   block_7_14 -> block_6_14 [label="", style="dotted", weight="5"]; 
+   block_7_14 -> block_7_14 [label="", style="dotted", weight="5"]; 
+   block_7_14 -> block_7_14 [label="", style="solid", weight="10"]; 
+   block_0_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_0_13 -> block_7_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_1_13 -> block_7_13 [label="", style="dotted", weight="5"]; 
+   block_3_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_6_13 -> block_7_13 [label="", style="dotted", weight="5"]; 
+   block_7_13 -> block_0_13 [label="", style="dotted", weight="5"]; 
+   block_7_13 -> block_1_13 [label="", style="dotted", weight="5"]; 
+   block_7_13 -> block_6_13 [label="", style="dotted", weight="5"]; 
+   block_7_13 -> block_7_13 [label="", style="dotted", weight="5"]; 
+   block_7_13 -> block_7_13 [label="", style="solid", weight="10"]; 
+   block_0_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_0_11 -> block_7_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_1_11 -> block_7_11 [label="", style="dotted", weight="5"]; 
+   block_2_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_3_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_5_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_6_11 -> block_7_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_0_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_1_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_6_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_7_11 [label="", style="dotted", weight="5"]; 
+   block_7_11 -> block_7_11 [label="", style="solid", weight="10"]; 
+   block_0_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_0_10 -> block_7_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_1_10 -> block_7_10 [label="", style="dotted", weight="5"]; 
+   block_2_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_3_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_6_10 -> block_7_10 [label="", style="dotted", weight="5"]; 
+   block_7_10 -> block_0_10 [label="", style="dotted", weight="5"]; 
+   block_7_10 -> block_1_10 [label="", style="dotted", weight="5"]; 
+   block_7_10 -> block_6_10 [label="", style="dotted", weight="5"]; 
+   block_7_10 -> block_7_10 [label="", style="dotted", weight="5"]; 
+   block_7_10 -> block_7_10 [label="", style="solid", weight="10"]; 
+   block_0_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_0_8 -> block_7_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_1_8 -> block_7_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_2_8 -> block_7_8 [label="", style="dotted", weight="5"]; 
+   block_3_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_5_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_6_8 -> block_7_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_0_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_1_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_6_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_7_8 [label="", style="dotted", weight="5"]; 
+   block_7_8 -> block_7_8 [label="", style="solid", weight="10"]; 
+   block_0_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_0_7 -> block_7_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_1_7 -> block_7_7 [label="", style="dotted", weight="5"]; 
+   block_2_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_3_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_5_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_6_7 -> block_7_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_0_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_1_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_6_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_7_7 [label="", style="dotted", weight="5"]; 
+   block_7_7 -> block_7_7 [label="", style="solid", weight="10"]; 
+   block_0_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_0_5 -> block_7_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_1_5 -> block_7_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_2_5 -> block_7_5 [label="", style="dotted", weight="5"]; 
+   block_3_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_4_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_5_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_6_5 -> block_7_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_0_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_1_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_6_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_7_5 [label="", style="dotted", weight="5"]; 
+   block_7_5 -> block_7_5 [label="", style="solid", weight="10"]; 
+   block_0_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_0_4 -> block_7_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_1_4 -> block_7_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_2_4 -> block_7_4 [label="", style="dotted", weight="5"]; 
+   block_3_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_5_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_6_4 -> block_7_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_0_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_1_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_6_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_7_4 [label="", style="dotted", weight="5"]; 
+   block_7_4 -> block_7_4 [label="", style="solid", weight="10"]; 
+   block_0_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_0_2 -> block_7_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_1_2 -> block_7_2 [label="", style="dotted", weight="5"]; 
+   block_2_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_2_2 -> block_7_2 [label="", style="dotted", weight="5"]; 
+   block_3_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_4_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_5_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_6_2 -> block_7_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_0_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_1_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_6_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_7_2 [label="", style="dotted", weight="5"]; 
+   block_7_2 -> block_7_2 [label="", style="solid", weight="10"]; 
+   block_0_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_0_1 -> block_7_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_1_1 -> block_7_1 [label="", style="dotted", weight="5"]; 
+   block_2_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_2_1 -> block_7_1 [label="", style="dotted", weight="5"]; 
+   block_3_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_4_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_5_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_6_1 -> block_7_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_0_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_1_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_6_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_7_1 [label="", style="dotted", weight="5"]; 
+   block_7_1 -> block_7_1 [label="", style="solid", weight="10"];
+ 
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/test1.c trunk/test/oops/alias/test1.c
*** orig/test/oops/alias/test1.c	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/test1.c	2009-12-12 16:42:58.000000000 +0300
***************
*** 0 ****
--- 1,17 ----
+ int main() {
+   int ***x, **y, *z, f;
+   int b; 
+ 
+   if (b)
+   {
+     x = &y;
+   }
+   else
+   {
+     y = &z;
+   }
+ 
+   **x = &f;
+ 
+   return 0;
+ }
diff -r -c -N orig/test/oops/alias/test2.c trunk/test/oops/alias/test2.c
*** orig/test/oops/alias/test2.c	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/test2.c	2010-01-24 18:04:20.000000000 +0300
***************
*** 0 ****
--- 1,31 ----
+ typedef struct 
+ {
+    int* a;
+    int* b;
+ } pair;
+ 
+ void l (int** c);
+ 
+ void f ()
+ { 
+   int t;
+   int *x;
+   pair y,z;
+   pair* pairPtr;
+ 
+   x = &t;
+ 
+   if (t == 1) 
+   {
+     pairPtr = &y;
+   }
+   else
+   {
+     pairPtr = &z;
+   }
+   
+   pairPtr->a = x;
+   pairPtr->b = pairPtr->a;
+ 
+   l(&x);
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/test3.c trunk/test/oops/alias/test3.c
*** orig/test/oops/alias/test3.c	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/test3.c	2009-12-27 15:52:24.000000000 +0300
***************
*** 0 ****
--- 1,12 ----
+ void main () { 
+     int **x, z;
+     struct { int* a, *b; } p;
+ 
+     if (z == 1)  {
+         x = &p.a;
+     } else {
+         x = &p.b;
+     }
+ 
+     *x = &z;
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/test4.c trunk/test/oops/alias/test4.c
*** orig/test/oops/alias/test4.c	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/test4.c	2010-01-24 16:24:33.000000000 +0300
***************
*** 0 ****
--- 1,22 ----
+ typedef union  
+ {
+     int* uptr1;
+     int* uptr2;
+ } utype;
+ 
+ void main () {    
+     int* array[10];
+     int* p;
+     int a, b;
+     utype uvar;
+ 
+     array[0] = &a;
+     p = array[0];
+     array[1] = &b;   
+ 
+     p = &a;
+ 
+     uvar.uptr1 = &a;
+     uvar.uptr2 = &b;
+     p = uvar.uptr1;
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/test5.c trunk/test/oops/alias/test5.c
*** orig/test/oops/alias/test5.c	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/test5.c	2010-01-24 15:50:23.000000000 +0300
***************
*** 0 ****
--- 1,6 ----
+ void main () { 
+     int* heap_ptr = malloc(sizeof(int)); 
+     int* anyHeap;
+ 
+     anyHeap = heap_ptr++;
+ }
\ No newline at end of file
diff -r -c -N orig/test/oops/alias/test.sh trunk/test/oops/alias/test.sh
*** orig/test/oops/alias/test.sh	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/alias/test.sh	2010-01-24 16:28:34.000000000 +0300
***************
*** 0 ****
--- 1,57 ----
+ #!/bin/sh
+ 
+ # list of tests
+ TESTS="test1 test2 test3 test4 test5"
+ 
+ # number of failed tests
+ ERROR=0
+ 
+ #extension of test names
+ EXT=.c
+ 
+ #alias graph file extension
+ DOTEXT=.dot 
+ 
+ # plugins that cil should use
+ PLUGINS=--dopranlibAA
+ 
+ #output file of alias graph
+ OUTPUT=--aliasgraphfile
+ 
+ # execution command
+ EXEC=../../../bin/cilly
+ 
+ # perform alias analysis on tests
+ for t in ${TESTS}; do
+     ${EXEC} ${PLUGINS} ${OUTPUT}=${t}${DOTEXT} ${t}${EXT}
+ done
+ 
+ #compare results with expected once
+ for t in ${TESTS}; do
+     if ! diff -ubB orig/${t}${DOTEXT} ${t}${DOTEXT} > ${t}.diff; then
+ 	echo "FAILED (see ${t}.diff)"
+ 	ERROR=$((${ERROR} + 1))
+     else
+ 	rm -f ${t}.diff
+     fi
+ done
+ 
+ #checking results
+ if [ ${ERROR} -eq 0 ]; then
+     echo "Alias analysis testing passed."
+ else
+     echo ${ERROR} "alias analysis tests failed."
+ fi
+ 
+ #converting dot files to png format
+ if [ -n "`which dot`" ]; then
+     if [ -d png ]; then
+         sleep 0
+     else
+         mkdir png
+     fi
+     echo "Converting alias graphs to *.png files."
+     for t in ${TESTS}; do
+         dot -Tpng ${t}${DOTEXT} > png/${t}.png
+     done
+ fi
\ No newline at end of file
diff -r -c -N orig/test/oops/test.sh trunk/test/oops/test.sh
*** orig/test/oops/test.sh	1970-01-01 03:00:00.000000000 +0300
--- trunk/test/oops/test.sh	2010-01-24 18:13:34.000000000 +0300
***************
*** 0 ****
--- 1,3 ----
+ #!/bin/sh
+ cd ./alias
+ ./test.sh
\ No newline at end of file
